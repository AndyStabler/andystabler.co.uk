<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy Stabler</title>
  <subtitle>Blog</subtitle>
  <id>https://andystabler.co.uk/</id>
  <link href="https://andystabler.co.uk"/>
  <link href="https://andystabler.co.uk/feed.xml" rel="self"/>
  <updated>2022-07-02T01:00:00+01:00</updated>
  <author>
    <name>Andy Stabler</name>
  </author>
  <entry>
    <title>Being honest</title>
    <link rel="alternate" href="/blog/being-honest/"/>
    <id>http://www.andystabler.co.uk/blog/being-honest/</id>
    <published>2022-07-02T01:00:00+01:00</published>
    <updated>2022-07-02T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/being-honest/dishonesty-e6a19d70.jpg" class="blog-post-image" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Are you an honest person? Be honest. I think most people would automatically answer yes. Not being honest is a bad thing. To lie is to deceive somebody intentionally and that’s not us. No, you must be thinking of somebody else.&lt;/p&gt;

&lt;p&gt;The reality is that...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/being-honest/dishonesty-e6a19d70.jpg" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Are you an honest person? Be honest. I think most people would automatically answer yes. Not being honest is a bad thing. To lie is to deceive somebody intentionally and that’s not us. No, you must be thinking of somebody else.&lt;/p&gt;

&lt;p&gt;The reality is that a lot of us are dishonest quite often. If you were to lovingly prepare a meal for me that wasn’t to my taste I would almost certainly say “this is wonderful, thank you so much”. I would much rather be inconvenienced than say “I think omelettes are better without the eggshell”. Because why would I risk hurting your feelings or jeopardising our friendship when you worked so hard on creating this meal?&lt;/p&gt;

&lt;p&gt;But let’s say you were training to be a chef. My dishonesty could be damaging to your progression and, perhaps even worse, it could mean you keep preparing these eggshell omelettes for me since I love them so much.&lt;/p&gt;

&lt;p&gt;We’re faced with decisions like this all the time and I think (at least in British culture) we shy away from giving direct constructive feedback because it can be so uncomfortable. The path of least resistance is paved with smiles and nods, but it doesn’t necessarily lead to where we want.&lt;/p&gt;

&lt;p&gt;I’ve seen these smiles and nods from teammates in every job I’ve had. Nobody wants to be the one to stand up and say “actually this meeting is a waste of time” because somebody put effort into organising it and usually the feedback is going straight to the person that pays your salary or decides who gets a promotion. Why would you want to risk that relationship? Why wouldn’t you just say exactly what that person wants to hear?&lt;/p&gt;

&lt;p&gt;I completely understand why somebody would be dishonest. Everybody takes feedback differently and it could genuinely be harmful to the person that speaks out.&lt;/p&gt;

&lt;p&gt;My advice to managers is to put serious effort into creating a culture where your teammates feel empowered to give you any kind of feedback. Non-constructive feedback can still be super useful. Just hearing “I hate this, but I have no idea what else we could do” is enough to get the ball rolling.&lt;/p&gt;

&lt;p&gt;By being honest with each other we can cultivate an environment that works for everybody. If you plan on being at a company a long time or would like your employees to stick around, honesty is absolutely crucial.&lt;/p&gt;

&lt;p&gt;Let me know your best tips for being honest with your team!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>We should draw more</title>
    <link rel="alternate" href="/blog/draw-more/"/>
    <id>http://www.andystabler.co.uk/blog/draw-more/</id>
    <published>2022-05-23T01:00:00+01:00</published>
    <updated>2022-05-23T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/draw-more/whiteboard-9ba6c6e6.jpg" class="blog-post-image" alt=""&gt;&lt;/p&gt;

&lt;p&gt;If you work in tech you’ll likely have to deal with complexity. Ageing codebases, new technologies, scaling up, every step of the way seems to involve wrangling complexity.&lt;/p&gt;

&lt;p&gt;It’s one thing to get your head around something tricky, but it’s something...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/draw-more/whiteboard-9ba6c6e6.jpg" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If you work in tech you’ll likely have to deal with complexity. Ageing codebases, new technologies, scaling up, every step of the way seems to involve wrangling complexity.&lt;/p&gt;

&lt;p&gt;It’s one thing to get your head around something tricky, but it’s something else entirely to communicate it to your team. Eventually, you have to share a problem or its solution, and this is where I see people struggle (myself included).&lt;/p&gt;

&lt;p&gt;It can be hard to follow along when someone is talking about a complex topic. They may have a lot of context in their head and they need to quickly decide what to share. Sharing too much or too little can leave everybody confused and frustrated, at this point you might see people working against each other to find a solution (this usually means going along with whatever the loudest person has to say).&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/draw-more/loud-aadea9f8.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I think drawing can help solve this problem. This isn’t a novel idea at all, but it’s helped me out more times than I can count and I think we should be doing more of it.&lt;/p&gt;

&lt;p&gt;Are you new to a codebase and trying to understand how it works? Draw out the fundamental flows and walk through them with your teammates. Everyone will learn from this. The most surprising part of this process is that it reveals the contradicting assumptions that even experienced members of the team have.&lt;/p&gt;

&lt;p&gt;Are you implementing a new feature? Draw the flow. The extra requirements nobody picked up on initially start to materialse.&lt;/p&gt;

&lt;p&gt;What I like the most about this is that it feels so cohesive. Teammates work together, building on each other’s ideas, to create something solid.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/draw-more/drawing-aab4d80b.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You don’t need to be the loudest person in the room. There have been meetings where I have silently walked up to a whiteboard and drawn up the approaches being discussed. I usually get it a bit wrong, but this is where the collaboration comes in—everybody joins in to fill in the gaps.&lt;/p&gt;

&lt;p&gt;The best part is that you don’t need to be an artist or a UML wizard—in fact the more simple your diagrams are the more effective they are (IMHO). Most of the diagrams I create are square boxes with arrows connecting them. They’re a way to communicate with each other and so the easier they are to read the better.&lt;/p&gt;

&lt;p&gt;Next time you’re working on a problem, try sharing your ideas through pictures and let me know how you get on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SYN Flood Denial of Service Attack</title>
    <link rel="alternate" href="/blog/syn-flood-denial-of-service-attack/"/>
    <id>http://www.andystabler.co.uk/blog/syn-flood-denial-of-service-attack/</id>
    <published>2022-02-20T00:00:00+00:00</published>
    <updated>2022-02-20T00:00:00+00:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/rob-curran-sUXXO3xPBYo-unsplash-a1b3e3b8.jpg" class="blog-post-image" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Last week I performed a Denial of Service attack against my Raspberry Pi. I used something called a SYN flood attack because it's a really simple and fun way to learn about TCP.&lt;/p&gt;

&lt;p&gt;Before we go any further I need to just point out that you can get...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/rob-curran-sUXXO3xPBYo-unsplash-a1b3e3b8.jpg" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Last week I performed a Denial of Service attack against my Raspberry Pi. I used something called a SYN flood attack because it's a really simple and fun way to learn about TCP.&lt;/p&gt;

&lt;p&gt;Before we go any further I need to just point out that you can get into serious trouble if you execute an attack on a computer you're not authorised to mess with. Here's what the NCA has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://www.nationalcrimeagency.gov.uk/?view=article&amp;amp;id=243"&gt;&lt;em&gt;The Computer Misuse Act 1990 makes it illegal to intentionally impair the operation of a computer or prevent or hinder access to a program/data on a computer unless you are authorised to do so.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The laws could be different in your country so please do your research and behave responsibly :)&lt;/p&gt;

&lt;h2 id="whats-a-syn-flood-attack"&gt;What's a SYN Flood attack?&lt;/h2&gt;

&lt;p&gt;When a server (website) and a client (your browser) want to talk to each other they need to first establish a connection. This is done by something called the TCP 3-way handshake. The handshake is essentially:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client says to server "Hey, wanna chat?" (the SYN flag is set in the TCP header)&lt;/li&gt;
  &lt;li&gt;Server responds with "Yeah" (both the SYN and ACK flag would be set in the response)&lt;/li&gt;
  &lt;li&gt;Client responds with "Cool" (just the ACK flag would be set)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a picture from Wikipedia that shows the handshake:&lt;/p&gt;

&lt;p&gt;[1]&lt;img src="/images/syn-flood-denial-of-service-attack/Tcp_normal.svg-4f2dae97.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When the server receives a SYN request it uses some resources to remember that the request came in. This way when it receives the final ACK request it can match it up to the first SYN request and the connection can be established successfully.&lt;/p&gt;

&lt;p&gt;We can exploit the 3-way handshake by firing lots of SYN requests without any intention of finishing the handshake (we never send the final ACK request). The server will use more and more resources to store these incomplete handshakes and eventually be unable to respond to any legitimate requests.&lt;/p&gt;

&lt;h2 id="the-attack"&gt;The Attack&lt;/h2&gt;

&lt;p&gt;The plan is to start a server on my Raspberry Pi and then trigger a SYN flood attack from another machine. I'm going to use a Raspberry Pi as my victim because it helps me visualise the client and server, but a virtual machine would work just as well!&lt;/p&gt;

&lt;h3 id="step-1---starting-the-web-server-on-the-raspberry-pi"&gt;Step 1 - Starting the web server on the Raspberry Pi&lt;/h3&gt;

&lt;p&gt;I'm too lazy to connect the Raspberry Pi up to a keyboard/monitor so I'm going to control it from my macbook. The following nmap command scans the machines on the local network and tells us their IP address:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt; $ nmap --script smb-os-discovery -p 445 192.168.1.0&amp;#x2F;24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/nmap-results-f62551ce.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we know the IP address is 192.168.1.227, let's SSH into the Raspbery Pi and start the server.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;  $ ssh pi@192.168.1.227
  pi@raspberrypi:~ $ cd ~&amp;#x2F;dev&amp;#x2F;my_site
  pi@raspberrypi:~ $ echo &amp;quot;&amp;lt;h1&amp;gt;Hello, World&amp;lt;&amp;#x2F;h1&amp;gt;&amp;quot; &amp;gt; index.html
  pi@raspberrypi:~ $ ruby -run -ehttpd . -p8000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a server running on port 8000 of the Raspberry Pi!&lt;/p&gt;

&lt;h3 id="step-2---start-inspecting-traffic-on-the-raspberry-pi"&gt;Step 2 - Start inspecting traffic on the Raspberry Pi&lt;/h3&gt;

&lt;p&gt;Using wireshark we can inspect the packets that the Raspberry Pi is sending and receiving. I'm going to use tshark so I can run it from a terminal, but you might get more out of using the GUI version. The following command will display all traffic that's coming and going on port 8000 (the port our site is using).&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;  pi@raspberrypi:~ $ tshark -Y &amp;quot;tcp.port == 8000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we visit 192.168.1.227:8000 we can actually see the handshake taking place in tshark's output:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/tshark-handshake-a0bda610.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Keep tshark running while we perform the attack in step 3!&lt;/p&gt;

&lt;h3 id="step-3---perform-the-attack"&gt;Step 3 - Perform the attack&lt;/h3&gt;

&lt;p&gt;I'm using a tool called scapy, but there are various options available (hping3 is a common choice). We just need the ability to construct and manipulate TCP packets.&lt;/p&gt;

&lt;p&gt;I like how scapy can be used to construct packets, the syntax involves using a &lt;code&gt;/&lt;/code&gt; to stack layers, like so &lt;code&gt;packet = ip/tcp/data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the attacking machine (not the Raspberry Pi), the following commands can be used to start the attack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;  $ scapy
  &amp;gt;ip = IP(dst=&amp;quot;192.168.1.227&amp;quot;) # pass in the Raspberry Pi&amp;#x27;s IP address as the destination
  &amp;gt;tcp = TCP(dport=8000, flags=&amp;quot;S&amp;quot;) # set the destination port to 8000 and use the &amp;quot;S&amp;quot; flag to say we&amp;#x27;re just interested in SYN requests
  &amp;gt;data = Raw(&amp;quot;Hello&amp;quot;)
  &amp;gt;packet = ip&amp;#x2F;tcp&amp;#x2F;data # stack the layers together to get the packet
  &amp;gt;send(packet, loop=1, verbose=0) # send the syn requests in an infinite loop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="step-4---inspecting-the-attack"&gt;Step 4 - Inspecting the attack&lt;/h3&gt;

&lt;p&gt;After about a second, hit Ctrl-C to cancel the attack. At this point, if we take a look at the output from tshark we &lt;em&gt;should&lt;/em&gt; see a whole load of SYN requests.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/tshark-unsuccessful-syn-flood-1dd8217b.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The output tells us that our attack isn't very effective. When the Raspberry Pi sends us a SYN/ACK response, our machine is responding with an RST. This means our machine is telling the server to forget about the connection and so our attack is doing no damage at all.&lt;/p&gt;

&lt;h3 id="step-5---spoofing-the-source"&gt;Step 5 - Spoofing the source&lt;/h3&gt;

&lt;p&gt;Our last attack wasn't so effective because our machine was resetting the connection and the server also detected that the requests were from the same port and labelled them as "TCP Retransmission".&lt;/p&gt;

&lt;p&gt;We don't want the attacker to know who we are and so by spoofing the source IP address we get some anonymity. Spoofing the IP also means that we'll no longer get the response. This is fine because we're just interested in sending the SYN requests, we don't care about the response.&lt;/p&gt;

&lt;p&gt;You have to be careful here though. It's not a good idea to spoof an IP address you don't own. By doing that you would be involving other networks and machines in your attack.&lt;/p&gt;

&lt;p&gt;It's also worth noting that using any active IP address would result in the RST being sent back to the server, rendering the attack useless. It's best to use an IP address that isn't used and preferably one of the &lt;a href="https://datatracker.ietf.org/doc/html/rfc1918"&gt;RFC1918&lt;/a&gt; private addresses.&lt;/p&gt;

&lt;p&gt;Let's try the attack again with a spoofed IP address and port:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;  $ scapy
  &amp;gt;ip = IP(src=&amp;quot;10.0.0.1&amp;quot;, dst=&amp;quot;192.168.1.227&amp;quot;) # pass in a spoofed, unused, private IP address as the source IP
  &amp;gt;tcp = TCP(sport=RandShort(), dport=8000, flags=&amp;quot;S&amp;quot;) # set the source port to a random value
  &amp;gt;data = Raw(&amp;quot;Hello&amp;quot;)
  &amp;gt;packet = ip&amp;#x2F;tcp&amp;#x2F;data # stack the layers together to get the packet
  &amp;gt;send(packet, loop=1, verbose=0) # send the syn requests in an infinite loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let that run for about a second and hit Ctrl-C. The results in tshark should reveal a more effective attack:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/tshark-syn-flood-1065331d.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Lots of SYN requests are being sent from our spoofed 10.0.0.1 IP address and lots of SYN/ACK responses are being sent back. I can't see any RSTs in the output, which is also great. Scrolling all the way to the bottom of the output though, shows something even more interesting:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/syn-flood-denial-of-service-attack/tshark-retransmissions-ded1dd03.png" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Our Raspberry Pi didn't get any ACK responses when it sent the SYN/ACK to 10.0.0.1 and so it's sending the SYN/ACK again. This means it's not only taking up resources for fresh SYN requests, but it's also taking up resources by repeatedly sending the SYN/ACK because it assumed the packet was dropped.&lt;/p&gt;

&lt;h2 id="final-notes"&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;The SYN flood attack isn't as effective as it used to be in the 80s/90s. Modern Linux doesn't allocate full resources to partially complete handshakes, but even so, if you had a botnet with several hundred machines performing a SYN flood attack I think it could cause some damage.&lt;/p&gt;

&lt;p&gt;There are various ways to mitigate a SYN flood attack. Some to look at are &lt;a href="https://en.wikipedia.org/wiki/SYN_cookies"&gt;SYN cookies&lt;/a&gt; and blocking the source ip address (10.0.0.1 in our case).&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href="https://en.wikipedia.org/wiki/SYN_flood"&gt;https://en.wikipedia.org/wiki/SYN_flood&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>10 Years In Tech</title>
    <link rel="alternate" href="/blog/ten-years-in-tech/"/>
    <id>http://www.andystabler.co.uk/blog/ten-years-in-tech/</id>
    <published>2022-01-03T00:00:00+00:00</published>
    <updated>2022-01-03T00:00:00+00:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/ten-years-in-tech/annie-spratt-6SHd7Q-l1UQ-unsplash-8dd203e3.jpg" class="blog-post-image" alt=""&gt;&lt;/p&gt;

&lt;p&gt;2022 marks the year I will have been in the tech industry for 10(!) years. There have been a lot of changes in that time,
both in my life and the tech world, and now feels like an appropriate time to share my thoughts on the past, present, and future...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/ten-years-in-tech/annie-spratt-6SHd7Q-l1UQ-unsplash-8dd203e3.jpg" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;2022 marks the year I will have been in the tech industry for 10(!) years. There have been a lot of changes in that time,
both in my life and the tech world, and now feels like an appropriate time to share my thoughts on the past, present, and future.&lt;/p&gt;

&lt;h2 id="loudly-quiet"&gt;Loudly Quiet&lt;/h2&gt;

&lt;p&gt;I'm a quiet person. Always have been and I think I always will be. I like to think things through before I speak, and I find it easier to communicate in smaller groups. For a long time I thought this was a flaw that needed to be fixed, rather than a strength that should be embraced. Can you blame me? Our industry has shaped itself around extroversion—Open plan offices, board rooms, town hall meetings, "let's go round the room and share our thoughts". We have all these processes in place to get things done, but it's like someone suggested them and only asked the loud people what they thought. The result is an industry that works great for certain types of people.&lt;/p&gt;

&lt;p&gt;But I think there's a place for everybody here. Over the past few years I've been what I call "loudly quiet", loudly defending people's right to be quiet. This means when I see a process that doesn't work well for quiet people I call it out. Not in a rude way, just a polite sort of nudge. Here's a made up, but not so unrealistic, example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Our criteria for a senior engineer is that they give 3 talks to our engineering department a quarter"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Someone new to the industry could think this career isn't for them if they don't enjoy public speaking, but that's not necessarily true. Public speaking is a great asset that will benefit your career as a software engineer, but I know from experience that you can be successful while playing into other strengths. I've worked with countless engineers that still do amazing work and earn good money while not speaking publicly.&lt;/p&gt;

&lt;p&gt;When I hear the above, I ask "what is the job to be done?". What are we actually trying to achieve by making people give 3 talks? Is it knowledge sharing? Is it visibility in the team? Is it something else? When we get to the underlying requirement we often find that there are so many creative and inclusive ways to achieve the same thing. I think that's beautiful. It means we can create an environment where everybody in the team can join in and be happy.&lt;/p&gt;

&lt;p&gt;Over the next decade, I'll continue to be loudly quiet. I wish I could go back 10 years and tell myself that there's a place for me here. I can't do that, but I can for new people in the industry.&lt;/p&gt;

&lt;h2 id="i-still-dont-know-everything"&gt;I still don't know everything&lt;/h2&gt;

&lt;p&gt;There's a finite set of things I know and an infinite set of things I don't. Over the past 10 years, both of those have grown.&lt;/p&gt;

&lt;p&gt;It's very intimidating when you first start out in tech—everybody seems to know so much more than you. Even if you make an effort to learn what someone mentions, you'll have a conversation with someone else who knows even more about a different topic. This doesn't really go away, but over time it becomes less of a concern. The way I see things now is that I don't need to know everything &lt;em&gt;because&lt;/em&gt; somebody else already does (or rather a collection of somebodies). Viewing it as collaborative (there are lots of knowledgeable people ready to help) rather than competitve (why do they know more than me?) is a much healthier mindset for me.&lt;/p&gt;

&lt;h2 id="theres-more-to-life-than-tech"&gt;There's more to life than tech&lt;/h2&gt;

&lt;p&gt;When I first started out in tech I was ferociously hungry to learn everything. I was always reading or writing code—all day, evenings, weekends etc. With this in mind, you'll be shocked to hear that after about 6 or 7 years I began to burn out. It's not a sustainable way for a human to live a life. Eventually, I started to do other things in my free time and became much happier and healthier. I became more than just a programmer—I was a runner, musician, furniture maker, husband, and (dog) father. Over the next 10 years I'm excited to be an engineer, but I'm also excited to play a lot of guitar and run some marathons.&lt;/p&gt;

&lt;h2 id="mentoring"&gt;Mentoring&lt;/h2&gt;

&lt;p&gt;I've been fortunate enough to work with some really wonderful people over the years. People that have taken me under their wing and been genuinenly invested in helping me progress my career. I could never begin to repay everyone for this, but I can pay it forward. I've been mentoring engineers for several years now and I intend to make it a priority over the next decade.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I have absolutely no idea what the tech world will look like in 10 years from now, but I hope it's a more inclusive and happy place where it's easy to center a div.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading and Happy New Year!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Measuring Engineers</title>
    <link rel="alternate" href="/blog/on-measuring-engineers/"/>
    <id>http://www.andystabler.co.uk/blog/on-measuring-engineers/</id>
    <published>2021-07-21T01:00:00+01:00</published>
    <updated>2021-07-21T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/on-measuring-engineers/chris-barbalis-unsplash-5b1c34b2.jpg" class="blog-post-image" alt=""&gt;&lt;/p&gt;

&lt;h2 id="what-makes-an-effective-engineer"&gt;What makes an effective engineer?&lt;/h2&gt;

&lt;p&gt;It’s common to hear an answer that prioritises technical competency. While this is understandable, I think it’s damaging to our industry and the humans that occupy its space.&lt;/p&gt;

&lt;p&gt;There’s an unfortunate stereotype that...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/on-measuring-engineers/chris-barbalis-unsplash-5b1c34b2.jpg" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;h2 id="what-makes-an-effective-engineer"&gt;What makes an effective engineer?&lt;/h2&gt;

&lt;p&gt;It’s common to hear an answer that prioritises technical competency. While this is understandable, I think it’s damaging to our industry and the humans that occupy its space.&lt;/p&gt;

&lt;p&gt;There’s an unfortunate stereotype that views programmers as computer-like. You’ll see “input coffee, output code” written on t-shirts and mugs. While quirky these only further contribute to the fact that our industry does not value humanity. How often have facial recognition tools failed on non-white skin? How often have forms asked for a gender with no consideration to those who are non-binary or asked for a name that fails if it is non-western? How many sites are unusable for people that are visually impaired? The list goes on and on.&lt;/p&gt;

&lt;p&gt;It’s not technical competency we should be prioritising, it’s empathy. This starts by hiring people who have wide ranging backgrounds and experiences. This is how we can begin to solve problems for other humans and not just able-bodied white men.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;I have lots of half-written posts on the humanity of software engineering that I can attempt to finish if others find this stuff helpful.&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Custom JS in Rails 6</title>
    <link rel="alternate" href="/blog/custom-js-in-rails-6/"/>
    <id>http://www.andystabler.co.uk/blog/custom-js-in-rails-6/</id>
    <published>2021-03-28T00:00:00+00:00</published>
    <updated>2021-03-28T00:00:00+00:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;I had a JavaScript class that I wanted to make use of in my Rails view. Sounded like a 5 minute job, but I spent a lot of time figuring out what the right approach is. Here's what I ended up with and you can tell me if it's a good or bad idea.&lt;/p&gt;

&lt;p&gt;Users...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I had a JavaScript class that I wanted to make use of in my Rails view. Sounded like a 5 minute job, but I spent a lot of time figuring out what the right approach is. Here's what I ended up with and you can tell me if it's a good or bad idea.&lt;/p&gt;

&lt;p&gt;Users can upload an image as part of an edit form on my site and I want them to preview the image before hitting save.
This is the JavaScript that's responsible for loading the preview image:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;class ImagePreview {
  constructor(inputButton) {
    this.inputButton = inputButton;
    this.imageElement = this.findImageElement(inputButton);
  }

  &amp;#x2F;&amp;#x2F; The file input button has a data attribute that contains the id of the corresponding image preview element
  &amp;#x2F;&amp;#x2F; This method is responsible for finding the image preview element based on that data attribute
  findImageElement() {
    let imageElementId = this.inputButton.dataset[&amp;quot;imagePreviewId&amp;quot;]
    return document.getElementById(imageElementId);
  }

  loadImage() {
    let file = this.inputButton.files[0];
    this.imageElement.src = URL.createObjectURL(file);

    this.imageElement.onload = function() {
      this.freeMemory();
    }.bind(this)
  }

  freeMemory() {
    URL.revokeObjectURL(this.imageElement.src);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to call this JavaScript in my view like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;  f.file_field :image,
    accept: &amp;quot;image&amp;#x2F;png,image&amp;#x2F;gif,image&amp;#x2F;jpeg&amp;quot;,
    onchange: &amp;quot;new ImagePreview(event.target).loadImage()&amp;quot;,
    data: { image_preview_id: &amp;quot;TheIdOfThePreviewImage&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I first just shoved the JS inside a &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag on the page it was needed but that didn't feel great. By doing that
I avoided all the good stuff that Rails Webpacker offers.&lt;/p&gt;

&lt;p&gt;With a lot of trial and error, this is the solution I eventually came up with that makes use of webpack.&lt;/p&gt;

&lt;p&gt;I added an &lt;code&gt;image_preview.js&lt;/code&gt; file inside the &lt;code&gt;packs/&lt;/code&gt; directory (inside was a copy and paste of the JavaScript class above):&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;tree app&amp;#x2F;javascript
app&amp;#x2F;javascript
├── channels
│   ├── consumer.js
│   └── index.js
└── packs
    ├── application.js
    └── image_preview.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I updated the class to export the object by default:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;  export default class ImagePreview {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then imported the code inside my &lt;code&gt;application.js&lt;/code&gt; file and attached the &lt;code&gt;ImagePreview&lt;/code&gt; object to the window. This
is what my &lt;code&gt;application.js&lt;/code&gt; file looked like afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;require(&amp;quot;@rails&amp;#x2F;ujs&amp;quot;).start()
require(&amp;quot;turbolinks&amp;quot;).start()
require(&amp;quot;@rails&amp;#x2F;activestorage&amp;quot;).start()
require(&amp;quot;channels&amp;quot;)

import ImagePreview from &amp;quot;.&amp;#x2F;image_preview&amp;quot;
window.ImagePreview = ImagePreview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here it is in action:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/custom-js-in-rails-6/image_preview-209ab320.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I had  a really confusing time trying to figure this out and I'm still not sure if this approach is correct.
It works and I think that's enough for my use-case, but if you know of a better way please let me know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Awk Notes</title>
    <link rel="alternate" href="/blog/awk-notes/"/>
    <id>http://www.andystabler.co.uk/blog/awk-notes/</id>
    <published>2019-07-19T01:00:00+01:00</published>
    <updated>2019-07-19T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;The notes below are from my initial readings into Awk, and they demonstrate using it (and some other unix tools) to perform simple text processing. Full disclaimer, I'm still learning this stuff 🙂&lt;/p&gt;

&lt;h2 id="example-1-tabulating-data"&gt;Example 1: Tabulating Data&lt;/h2&gt;

&lt;p&gt;Below are some fruits...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The notes below are from my initial readings into Awk, and they demonstrate using it (and some other unix tools) to perform simple text processing. Full disclaimer, I'm still learning this stuff 🙂&lt;/p&gt;

&lt;h2 id="example-1-tabulating-data"&gt;Example 1: Tabulating Data&lt;/h2&gt;

&lt;p&gt;Below are some fruits and their prices.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cat fruits.txt
Apple £2.00
Banana £1.50
Kumquat £2.00
Peach £1.50
Strawberry £2.00
Raspberry £2.00
Kiwi £1.00
Pear £1.00
Tomato £1.50
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It'd be really useful if I could take that list and print it in a tabulated way:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; fruits.txt
£2.00   Apple
£1.50   Banana
£2.00   Kumquat
£1.50   Peach
£2.00   Strawberry
£2.00   Raspberry
£1.00   Kiwi
£1.00   Pear
£1.50   Tomato
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Might be nice to sort them by price too:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; fruits | sort
£1.00   Kiwi
£1.00   Pear
£1.50   Banana
£1.50   Peach
£1.50   Tomato
£2.00   Apple
£2.00   Kumquat
£2.00   Raspberry
£2.00   Strawberry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks great, but actually, seeing the duplicated price is making all this data look too noisy. If the price is the same as the previous fruit, let's just not print it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1 }&amp;#x27; fruits.txt |
sort |
awk &amp;#x27;{
  price = $1
  name = $2
  if (price == previous_price) {
    print &amp;quot;\t&amp;quot; name
  } else {
    previous_price = price
    print price &amp;quot;\t&amp;quot; name
  }
}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You'll notice that's a bit of a mouthful to write all in one go. At this point we could move that to an executable file called &lt;code&gt;fruit_formatting&lt;/code&gt; if we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ ls -la fruit_formatting
-rwxr--r--  1 andy  staff  190  7 Jul 22:29 fruit_formatting
$ cat fruit_formatting
awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1 }&amp;#x27; fruits.txt |
sort |
awk &amp;#x27;{
  price = $1
  name = $2
  if (price == previous_price) {
    print &amp;quot;\t&amp;quot; name
  } else {
    previous_price = price
    print price &amp;quot;\t&amp;quot; name
  }
}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ .&amp;#x2F;fruit_formatting

£1.00   Kiwi
        Pear
£1.50   Banana
        Peach
        Tomato
£2.00   Apple
        Kumquat
        Raspberry
        Strawberry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice, we did it!&lt;/p&gt;

&lt;h2 id="example-2-filtering"&gt;Example 2: Filtering&lt;/h2&gt;

&lt;p&gt;OK, here's a new problem. I'd like to find the 5 slowest response times on my site with a 200 status code.&lt;/p&gt;

&lt;p&gt;Here's what my log file looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ tail -20 logfile
Started GET &amp;quot;&amp;#x2F;balance_forecasts&amp;#x2F;97?date=18-12-2016&amp;quot; for ::1 at 2017-05-21 13:33:12 +0100
Processing by BalanceForecastsController#show as *&amp;#x2F;*
  Parameters: {&amp;quot;date&amp;quot;=&amp;gt;&amp;quot;18-12-2016&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;97&amp;quot;}
  User Load (0.2ms)  SELECT  &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = ?  ORDER BY &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; ASC LIMIT 1  [[&amp;quot;id&amp;quot;, 97]]
  Balance Load (0.2ms)  SELECT  &amp;quot;balances&amp;quot;.* FROM &amp;quot;balances&amp;quot; WHERE &amp;quot;balances&amp;quot;.&amp;quot;user_id&amp;quot; = ?  ORDER BY &amp;quot;balances&amp;quot;.&amp;quot;on&amp;quot; DESC LIMIT 1  [[&amp;quot;user_id&amp;quot;, 97]]
  Transfer Load (0.1ms)  SELECT &amp;quot;transfers&amp;quot;.* FROM &amp;quot;transfers&amp;quot; WHERE &amp;quot;transfers&amp;quot;.&amp;quot;user_id&amp;quot; = ?  [[&amp;quot;user_id&amp;quot;, 97]]
  CACHE (0.0ms)  SELECT  &amp;quot;balances&amp;quot;.* FROM &amp;quot;balances&amp;quot; WHERE &amp;quot;balances&amp;quot;.&amp;quot;user_id&amp;quot; = ?  ORDER BY &amp;quot;balances&amp;quot;.&amp;quot;on&amp;quot; DESC LIMIT 1  [[&amp;quot;user_id&amp;quot;, 97]]
  Rendered balance_forecasts&amp;#x2F;_blank_slate.html.erb (0.1ms)
Completed 200 OK in 22ms (Views: 14.2ms | ActiveRecord: 0.5ms)


Started GET &amp;quot;&amp;#x2F;balance_forecasts&amp;#x2F;97?date=26-6-2017&amp;quot; for ::1 at 2017-05-21 13:33:14 +0100
Processing by BalanceForecastsController#show as *&amp;#x2F;*
  Parameters: {&amp;quot;date&amp;quot;=&amp;gt;&amp;quot;26-6-2017&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;97&amp;quot;}
  User Load (0.1ms)  SELECT  &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot; WHERE &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = ?  ORDER BY &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; ASC LIMIT 1  [[&amp;quot;id&amp;quot;, 97]]
  Balance Load (0.3ms)  SELECT  &amp;quot;balances&amp;quot;.* FROM &amp;quot;balances&amp;quot; WHERE &amp;quot;balances&amp;quot;.&amp;quot;user_id&amp;quot; = ?  ORDER BY &amp;quot;balances&amp;quot;.&amp;quot;on&amp;quot; DESC LIMIT 1  [[&amp;quot;user_id&amp;quot;, 97]]
  Transfer Load (0.1ms)  SELECT &amp;quot;transfers&amp;quot;.* FROM &amp;quot;transfers&amp;quot; WHERE &amp;quot;transfers&amp;quot;.&amp;quot;user_id&amp;quot; = ?  [[&amp;quot;user_id&amp;quot;, 97]]
  CACHE (0.0ms)  SELECT  &amp;quot;balances&amp;quot;.* FROM &amp;quot;balances&amp;quot; WHERE &amp;quot;balances&amp;quot;.&amp;quot;user_id&amp;quot; = ?  ORDER BY &amp;quot;balances&amp;quot;.&amp;quot;on&amp;quot; DESC LIMIT 1  [[&amp;quot;user_id&amp;quot;, 97]]
  Rendered balance_forecasts&amp;#x2F;_show.html.erb (1.2ms)
Completed 200 OK in 261ms (Views: 12.4ms | ActiveRecord: 0.6ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let's see if we can find all of the &lt;code&gt;Completed 200 OK&lt;/code&gt; rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ tail -50 logfile | awk &amp;#x27;&amp;#x2F;Completed 200 OK&amp;#x2F;&amp;#x27;
Completed 200 OK in 490ms (Views: 12.4ms | ActiveRecord: 0.6ms)
Completed 200 OK in 388ms (Views: 11.7ms | ActiveRecord: 0.4ms)
Completed 200 OK in 32ms (Views: 15.3ms | ActiveRecord: 0.5ms)
Completed 200 OK in 22ms (Views: 14.2ms | ActiveRecord: 0.5ms)
Completed 200 OK in 261ms (Views: 12.4ms | ActiveRecord: 0.6ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up is extracting the time in ms from those rows. Since the times are always in column 5 we can use &lt;code&gt;$5&lt;/code&gt; to get the values.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ tail -50 logfile | awk &amp;#x27;&amp;#x2F;Completed 200 OK&amp;#x2F;{print $5}&amp;#x27;
490ms
388ms
32ms
22ms
261ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's sort them in descending order to see the slowest values at the top&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ tail -50 logfile | awk &amp;#x27;&amp;#x2F;Completed 200 OK&amp;#x2F;{print $5}&amp;#x27; | sort -nr
490ms
388ms
261ms
32ms
22ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used &lt;code&gt;sort -nr&lt;/code&gt; there to sort by numerical value and reverse the order.&lt;/p&gt;

&lt;p&gt;That's looking quite useful, but if I run that over a much larger log file I'd get a lot of text printed to my terminal. I'll run this script over 5000 rows and then use the &lt;code&gt;head&lt;/code&gt; command to only look at the top 5 slowest times.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ tail -5000 logfile | awk &amp;#x27;&amp;#x2F;Completed 200 OK&amp;#x2F;{print $5}&amp;#x27; | sort -nr | head -5
8140ms
6257ms
5409ms
5382ms
5118ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="example-3-more-tabulation"&gt;Example 3: More tabulation&lt;/h2&gt;

&lt;p&gt;Back to food again (naturally). I have a new price list:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cat foods.txt
Item name, Price
Rice pudding, £1.20
Jam sandwich, £1.75
Coffee, £1.00
Crisps, £1.00
Custard tart, £1.75
Red grapes, £1.20
Green grapes, £1.20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'd like to format it in the same way as the fruits in &lt;a href="#example-1-tabulating-data"&gt;example 1&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;£1.00   Kiwi
        Pear
£1.50   Banana
        Peach
        Tomato
£2.00   Apple
        Kumquat
        Raspberry
        Strawberry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's a slight problem here though. You'll notice that the top row of this file contains &lt;code&gt;Item name&lt;/code&gt; and &lt;code&gt;Price&lt;/code&gt;. We don't want this in our report, so we'll need a way to remove it. There's another issue here however, and it isn't immediately obvious. In our original &lt;code&gt;fruit_formatting&lt;/code&gt; script we said&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This printed the price followed by the name of the fruit. Unfortunately, this won't work here because some of our food names span two words, for example &lt;code&gt;Jam sandwich&lt;/code&gt;. This script would print &lt;code&gt;sandwich&lt;/code&gt; followed by a tab, followed by &lt;code&gt;jam&lt;/code&gt;. Let's run it to find out.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;awk &amp;#x27;{print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; foods.txt
name,   Item
pudding,        Rice
sandwich,       Jam
£1.00   Coffee,
£1.00   Crisps,
tart,   Custard
grapes, Red
grapes, Green
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let's look at ignoring the top line of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ awk &amp;#x27;NR != 1 {print $0}&amp;#x27; foods.txt
Rice pudding, £1.20
Jam sandwich, £1.75
Coffee, £1.00
Crisps, £1.00
Custard tart, £1.75
Red grapes, £1.20
Green grapes, £1.20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NR&lt;/code&gt; here tells us the number of the current record. In our script we are saying "if the current record is not the first record in the file, then print the full record".&lt;/p&gt;

&lt;p&gt;Our next issue of printing the price and full food name correctly can be solved by choosing a new field separator. Instead of using the default character (a space) to delimit words, let's use a comma.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ awk -F &amp;quot;, &amp;quot; &amp;#x27;NR != 1 {print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; foods.txt
£1.20   Rice pudding
£1.75   Jam sandwich
£1.00   Coffee
£1.00   Crisps
£1.75   Custard tart
£1.20   Red grapes
£1.20   Green grapes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting all this together with our original &lt;code&gt;fruit_formatting&lt;/code&gt; script, we get the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cat food_formatting
awk -F &amp;quot;, &amp;quot; &amp;#x27;NR != 1 {print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; foods.txt |
sort |
awk &amp;#x27;{
  price = $1
  name = $2
  if (price == previous_price) {
    print &amp;quot;\t&amp;quot; name
  } else {
    previous_price = price
    print price &amp;quot;\t&amp;quot; name
  }
}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ .&amp;#x2F;food_formatting
£1.00   Coffee
        Crisps
£1.20   Green
        Red
        Rice
£1.75   Custard
        Jam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost there, but it still looks like we're cutting off the &lt;code&gt;sandwich&lt;/code&gt; part of &lt;code&gt;Jam sandwich&lt;/code&gt;. This is because our awk script&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;awk &amp;#x27;{
  price = $1
  name = $2
  if (price == previous_price) {
    print &amp;quot;\t&amp;quot; name
  } else {
    previous_price = price
    print price &amp;quot;\t&amp;quot; name
  }
}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is given this input:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;awk -F &amp;quot;, &amp;quot; &amp;#x27;NR != 1 {print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; foods.txt | sort
£1.00 Coffee
£1.00 Crisps
£1.20 Green grapes
£1.20 Red grapes
£1.20 Rice pudding
£1.75 Custard tart
£1.75 Jam sandwich
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;code&gt;print "\t" name&lt;/code&gt; part is going to only look at the second column of text (&lt;code&gt;Jam&lt;/code&gt;), but not the remaining line since we set &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;$2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's set &lt;code&gt;$1&lt;/code&gt; (the price) to the empty string and then use &lt;code&gt;$0&lt;/code&gt;, which gives us the full record, to print the full food name:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cat food_formatting
awk -F &amp;quot;, &amp;quot; &amp;#x27;NR != 1 {print $2 &amp;quot;\t&amp;quot; $1}&amp;#x27; foods.txt |
sort |
awk &amp;#x27;{
  price = $1
  name = $2
  if (price == current_price) {
    $1 = &amp;quot;&amp;quot;
    print &amp;quot;\t&amp;quot; $0
  } else {
    current_price = price
    $1 = &amp;quot;&amp;quot;
    print price &amp;quot;\t&amp;quot; $0
  }
}&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ .&amp;#x2F;food_formatting
£1.00    Coffee
         Crisps
£1.20    Green grapes
         Red grapes
         Rice pudding
£1.75    Custard tart
         Jam sandwich
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you have it. We just used some simple parts of Awk to do some nifty text processing. If
you'd like to know more things, like how to write detailed pattern matching, functions, loops, arrays, etc. then check out the
&lt;a href="https://www.amazon.co.uk/Sed-Awk-Arnold-Dougherty/dp/1565922255" target="_blank"&gt;sed &amp;amp; awk&lt;/a&gt;
book. This has the added bonus of being written by someone that actually knows this stuff 😅&lt;/p&gt;

&lt;p&gt;If you've got any awk scripts you use regularly that make your life easier I'd love to hear about them.&lt;/p&gt;

&lt;p&gt;👋&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Offline Development</title>
    <link rel="alternate" href="/blog/no-wifi-development/"/>
    <id>http://www.andystabler.co.uk/blog/no-wifi-development/</id>
    <published>2018-09-28T01:00:00+01:00</published>
    <updated>2018-09-28T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;I was recently on a long haul flight from Manchester to San Francisco with &lt;em&gt;no Wi-Fi&lt;/em&gt;. As you can imagine,
between regular snacks and naps, being off the grid for so long was quite the struggle. A few hours into the
flight, I decided to pop out my laptop...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I was recently on a long haul flight from Manchester to San Francisco with &lt;em&gt;no Wi-Fi&lt;/em&gt;. As you can imagine,
between regular snacks and naps, being off the grid for so long was quite the struggle. A few hours into the
flight, I decided to pop out my laptop anyway and do some development—what happened next was a bit magical for me.&lt;/p&gt;

&lt;p&gt;Without the helping hand of The Google or colleagues to pester with my questions I had to (wait for it) think for
myself. It sounds a little bit ridiculous, but having to only use what little I keep in my head is something I
haven't done in a very long time—and rightly so really, almost everything I need to know in my day–to–day life can be
acquired with a few tap–a–tap–taps on my phone. I decided to just have some fun with it and see how far I'd get.
Between you and I, it took me about 2 minutes before I realised just how little I knew (the time it took to get my
laptop out of overhead storage, log in, sip tea, and open up a terminal).&lt;/p&gt;

&lt;p&gt;Here's what I was working on.&lt;/p&gt;

&lt;p&gt;I've recently been doing some API work and wanted to see how much of the OAuth 2 protocol I could remember. I wanted
to make a simple Ruby program where I had models for an authorisation server and a resource server. I could then
make a call to get an authorisation grant, swap it for a token, and then use that token to access a resource.&lt;/p&gt;

&lt;p&gt;The first thing I wanted to do was have my tests run frequently. Usually, I'd use Guard for this (Guard runs the
tests whenever a file is modified), but here's the thing—Guard is usually set up on projects I work on, and if it's
not I'd just Google how to configure it. So what do? I wrote the following down on the back of a boomerang pillow
receipt:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things I don't know:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Guard&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I then had to figure out a way to get the tests to run periodically. As a temporary hack something like this
seemed reasonable:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;while true
  run tests
  sleep 5 seconds
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought something like that could be quite easily written in bash, so I focused my attention on the terminal and
to my surprise, my hands didn't start typing—I couldn't remember the syntax for a while loop in bash. Well, no
matter, I thought to myself, I'll just add it to my list:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things I don't know:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Guard&lt;/li&gt;
    &lt;li&gt;While loop syntax in bash&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is when I started to feel excited, maybe even a bit creative. I could remember how to repeat a command
multiple times using &lt;code&gt;repeat&lt;/code&gt;, so I ended up using the following to get my tests to run periodically:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;repeat 3000 rspec &amp;amp;&amp;amp; sleep 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This runs the tests, takes a 5–second nap, then does it all again, 3000 times in total. It's not ideal, but it did
the job and it meant I identified 2 things I didn't know. That's a win (I think).&lt;/p&gt;

&lt;p&gt;Next, I started thinking about what I wanted my project to achieve. Here is my list of requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Developers can register their application with my program&lt;/li&gt;
  &lt;li&gt;Users can go through an authorisation process with my program&lt;/li&gt;
  &lt;li&gt;A client program can access some resource if the user has completed authorisation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I couldn't remember what the OAuth 2 spec says about registering applications—something about the client sending
a software statement and getting back some client credentials. It was the least known requirement for me, so I
just added it to my growing list of Things Andy Doesn't Know.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things I don't know:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Guard&lt;/li&gt;
    &lt;li&gt;While loop syntax in bash&lt;/li&gt;
    &lt;li&gt;OAuth 2—client registration&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, I began putting together an authorisation server. This would be a Plain Old Ruby Object that could
be used to authorise a client's application with mine. I got a bit stumped around generating tokens—is
there a secure way of achieving this? Is there an insecure way of doing this? I settled on using
&lt;code&gt;SecureRandom.uuid&lt;/code&gt;, but I added an extra item to my list anyway so I could read up on it later.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things I don't know:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Guard&lt;/li&gt;
    &lt;li&gt;While loop syntax in bash&lt;/li&gt;
    &lt;li&gt;OAuth 2—client registration&lt;/li&gt;
    &lt;li&gt;How should I be generating tokens? Is SecureRandom.uuid the right thing to use?&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once I had a very basic authorisation server implemented I moved on to the resource server. The resource server
takes an access token (provided by an authorisation server) and returns some resource in exchange. My resource
server needed to talk to the authorisation server to verify access tokens. This meant I needed to remember how to
include one file in another in Ruby. In Rails, you rarely need to think about this kind of thing due to the fancy
autoloading of classes, so this had me stumped for a while. After some hacking, I found that &lt;code&gt;require_relative&lt;/code&gt;
seemed to do the trick, but I wasn't confident this is what is usually done.&lt;/p&gt;

&lt;p&gt;After wiping the crumbs and spilled tea off the back of my, somewhat crumpled, receipt I updated it once more:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things I don't know:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Guard&lt;/li&gt;
    &lt;li&gt;While loop syntax in bash&lt;/li&gt;
    &lt;li&gt;OAuth 2—client registration&lt;/li&gt;
    &lt;li&gt;How should I be generating tokens? Is SecureRandom.uuid the right thing to use?&lt;/li&gt;
    &lt;li&gt;Including files in Ruby land&lt;/li&gt;
    &lt;li&gt;How does Rails autoloading work?&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I continued with the resource server and ended up with a (frankly janky) implementation of OAuth 2, but my tests
were passing and I'd discovered 6 things I didn't know that, previously, I would have assured you I was au fait with.
It was a strangely exciting experience for me (lack of sleep may have played a part).&lt;/p&gt;

&lt;p&gt;Have you tried anything like this before? If so, what was your experience? I may try and integrate something similar
into my work–life by restricting certain pots of knowledge (solving problems by only speaking to people, or the
opposite—figuring things out with just Google).&lt;/p&gt;

&lt;p&gt;If you're interested you can find my original OAuth 2 toy project &lt;a href="https://github.com/AndyStabler/oauth-playground" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Proxies in ECMAScript</title>
    <link rel="alternate" href="/blog/proxies-in-ecmascript/"/>
    <id>http://www.andystabler.co.uk/blog/proxies-in-ecmascript/</id>
    <published>2018-03-31T01:00:00+01:00</published>
    <updated>2018-03-31T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;h2 id="what-are-they"&gt;What are they?&lt;/h2&gt;

&lt;p&gt;Proxies give us greater control over what happens when we interact with objects. They wrap a &lt;code&gt;target&lt;/code&gt; object and
expose some of the internal operations on it. This means we can customise what happens when we get or set a
property, create...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="what-are-they"&gt;What are they?&lt;/h2&gt;

&lt;p&gt;Proxies give us greater control over what happens when we interact with objects. They wrap a &lt;code&gt;target&lt;/code&gt; object and
expose some of the internal operations on it. This means we can customise what happens when we get or set a
property, create a new instance of an object, call a function, and more (see the full list of the low-level
operations we can intercept
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object" target="_blank"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id="some-layman-definitions"&gt;Some layman definitions:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Proxy&lt;/strong&gt;: A wrapper object that exposes internal operations of a target object&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt;: The object the proxy is wrapping&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Handler&lt;/strong&gt;: The proxy looks in this object for any trap methods you may have provided&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trap&lt;/strong&gt;: A function added to a handler object that tells the proxy what to do when a specific method on the
target is called&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="example"&gt;Example&lt;/h2&gt;

&lt;p&gt;Here's an example of a proxy that adds logging for getting and setting a property on a target object.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;  &amp;#x2F;&amp;#x2F; this is our target object
  let friend = {
    name: &amp;quot;Luna Lovegood&amp;quot;,
    house: &amp;quot;Ravenclaw&amp;quot;,
    patronus: &amp;quot;Hare&amp;quot;
  };

  &amp;#x2F;&amp;#x2F; the handler for the proxy
  let handler = {
    &amp;#x2F;&amp;#x2F; trap method
    &amp;#x2F;&amp;#x2F; this method will be called when we read a property on the proxy object
    get(trapTarget, key, receiver) {
      console.log(`Getting property &amp;quot;${key}&amp;quot;`);
      &amp;#x2F;&amp;#x2F; The Reflect object provides us with the default implementation
      &amp;#x2F;&amp;#x2F; There&amp;#x27;s a Reflect method for all proxy trap methods
      return Reflect.get(trapTarget, key, receiver);
    },
    &amp;#x2F;&amp;#x2F; trap method
    &amp;#x2F;&amp;#x2F; this method will be called when we set a property on the proxy object
    set(trapTarget, key, value, receiver) {
      console.log(`Setting property &amp;quot;${key}&amp;quot;`);
      return Reflect.set(trapTarget, key, value, receiver);
    }
  };

  &amp;#x2F;&amp;#x2F; creating the proxy– we pass in the friend (target) and the handler
  let friendProxy = new Proxy(friend, handler);

  friendProxy.name;
  &amp;#x2F;&amp;#x2F; Getting property &amp;quot;name&amp;quot;
  &amp;#x2F;&amp;#x2F; &amp;#x27;Luna Lovegood&amp;#x27;

  friendProxy.hobby = &amp;quot;Painting&amp;quot;;
  &amp;#x2F;&amp;#x2F; Setting property &amp;quot;hobby&amp;quot;
  &amp;#x2F;&amp;#x2F; &amp;#x27;Painting&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used the &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt; trap methods there to intercept calls that get and set properties on the target
object through the proxy. Since the proxy &lt;em&gt;virtualises&lt;/em&gt; the target object, any operation available on the target
object can be called from the proxy.&lt;/p&gt;

&lt;h2 id="using-proxies-for-validation"&gt;Using proxies for validation&lt;/h2&gt;

&lt;p&gt;Proxies can be used to add validation to objects. I'll cover two use cases here– checking the arguments passed
into a function match some validation criteria, and checking for typos in property names.&lt;/p&gt;

&lt;h3 id="parameter-validation"&gt;Parameter validation&lt;/h3&gt;

&lt;p&gt;Since there is an &lt;code&gt;apply()&lt;/code&gt; trap method available to us, we can add validation to make sure that the
arguments we pass into a function are what we would expect.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;speak()&lt;/code&gt; function with the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We don't want to say more than one thing at a time&lt;/li&gt;
  &lt;li&gt;We only want to speak in strings&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;  &amp;#x2F;&amp;#x2F; this is our target object
  function speak(message) {
    console.log(`Raising your head, you declare to the room &amp;quot;${message}&amp;quot;`);
  }

  let speakProxy = new Proxy(speak, {
    &amp;#x2F;&amp;#x2F; trap method
    apply(trapTarget, thisArg, argumentsList) {
      if (argumentsList.length !== 1) {
        throw new Error(&amp;quot;Please say one thing at a time&amp;quot;);
      }
      if (typeof argumentsList[0] !== &amp;quot;string&amp;quot;) {
        throw new TypeError(&amp;quot;Please use your words&amp;quot;);
      }
      &amp;#x2F;&amp;#x2F; call the apply method on the Reflect object to get the default
      &amp;#x2F;&amp;#x2F; behaviour
      return Reflect.apply(trapTarget, thisArg, argumentsList);
    }
  });

  speakProxy(&amp;quot;Wingardium Leviosa&amp;quot;);
  &amp;#x2F;&amp;#x2F; Raising your head, you declare to the room &amp;quot;Wingardium Leviosa&amp;quot;
  speakProxy(&amp;quot;Wingardium Leviosa&amp;quot;, &amp;quot;Accio Firebolt!&amp;quot;);
  &amp;#x2F;&amp;#x2F; Error: Please say one thing at a time
  speakProxy(42); &amp;#x2F;&amp;#x2F; TypeError: Please use your words
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have defined a &lt;code&gt;speak()&lt;/code&gt; method that prints out a given message.
Firstly, we added the &lt;code&gt;apply()&lt;/code&gt; trap method to the handler object. This method is executed when we call any
function on the proxy object.&lt;/p&gt;

&lt;p&gt;Next, we added two conditions– the first checks that there is exactly 1 argument passed into
the function, the other checks that the type of the argument is a string. If we're happy that the argument
satisfies our validation criteria, then we call &lt;code&gt;Reflect.apply()&lt;/code&gt; to execute the default implementation.&lt;/p&gt;

&lt;h3 id="checking-for-typos-in-property-names"&gt;Checking for typos in property names&lt;/h3&gt;

&lt;p&gt;When a property cannot be found on an object, the default behaviour is to return &lt;code&gt;undefined&lt;/code&gt;. This behaviour can
sometimes lead to hard to track down bugs, especially in larger in projects. We can guard against this using
proxies.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;  let friend = {
    name: &amp;quot;Luna Lovegood&amp;quot;,
    house: &amp;quot;Ravenclaw&amp;quot;,
    patronus: &amp;quot;Hare&amp;quot;
  };

  friend.house; &amp;#x2F;&amp;#x2F; Ravenclaw
  friend.hoose; &amp;#x2F;&amp;#x2F; undefined

  let friendProxy = new Proxy(friend, {
    get(trapTarget, key, receiver) {
      if (!(key in receiver))
        throw new TypeError(&amp;quot;Property not recognised&amp;quot;);
      return Reflect.get(trapTarget, key, receiver);
    }
  });

  friend.house; &amp;#x2F;&amp;#x2F; Ravenclaw
  friend.hoose; &amp;#x2F;&amp;#x2F; undefined (the validation exists on the proxy, not the target)

  friendProxy.house; &amp;#x2F;&amp;#x2F; Ravenclaw
  friendProxy.hoose; &amp;#x2F;&amp;#x2F; TypeError: Property not recognised.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add similar validation to make sure we are only ever setting a property that already exists. This isn't
always what we want, but it's still an interesting example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;  let friend = {
    name: &amp;quot;Andy Stabler&amp;quot;,
    house: &amp;quot;Hufflepuff&amp;quot;,
    patronus: undefined
  };

  friend.patronus = &amp;quot;Salmon&amp;quot;;
  friend.patroonus = &amp;quot;Stag&amp;quot;;
  friend;
  &amp;#x2F;&amp;#x2F; { name: &amp;#x27;Andy Stabler&amp;#x27;,
  &amp;#x2F;&amp;#x2F;  house: &amp;#x27;Hufflepuff&amp;#x27;,
  &amp;#x2F;&amp;#x2F;  patronus: &amp;#x27;Salmon&amp;#x27;,
  &amp;#x2F;&amp;#x2F;  patroonus: &amp;#x27;Stag&amp;#x27; }
  &amp;#x2F;&amp;#x2F; Whoopsy! We accidentally set a patroonus property!

  let friendProxy = new Proxy(friend, {
    get(trapTarget, key, receiver) {
      if (!(key in receiver))
        throw new TypeError(&amp;quot;Property not recognised.&amp;quot;);
      return Reflect.get(trapTarget, key, receiver);
    },
    set(trapTarget, key, value, receiver) {
      if (!(key in receiver))
        throw new TypeError(&amp;quot;Property not recognised.&amp;quot;);
      return Reflect.set(trapTarget, key, value, receiver);
    }
  });

  delete friend.patroonus;
  friendProxy.patronus = &amp;quot;Stag&amp;quot;;
  friendProxy.patroonus = &amp;quot;Wolf&amp;quot;; &amp;#x2F;&amp;#x2F; TypeError: Property not recognised.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In both the &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt; trap methods we performed a check to make sure that the &lt;code&gt;key&lt;/code&gt; was &lt;code&gt;in&lt;/code&gt; the receiver
object. The &lt;code&gt;in&lt;/code&gt; operator looks in the object and its prototype chain for a property with a matching key. If the
property is not found, then a &lt;code&gt;TypeError&lt;/code&gt; is raised.&lt;/p&gt;

&lt;h2 id="where-can-i-learn-more"&gt;Where can I learn more?&lt;/h2&gt;

&lt;p&gt;I've only scratched the surface of proxies and their many uses in ECMAScript. You can find out a lot more using
the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="//amzn.eu/6mexKCK" target="_blank"&gt;Understanding ECMAScript 6&lt;/a&gt; is my favourite book right now. It has a very
thorough chapter on proxies which is  worth reading.
    &lt;ul&gt;
      &lt;li&gt;I'm making notes as I go through the book. Nicholas kindly let me make them public, so you can
follow along &lt;a href="https://github.com/AndyStabler/ECMAScript6Notes" target="_blank"&gt;here&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank"&gt;The MDN web docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.ecma-international.org/ecma-262/#sec-proxy-object-internal-methods-and-internal-slots" target="_blank"&gt;The ECMAScript specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Typed Arrays in ECMAScript</title>
    <link rel="alternate" href="/blog/typed-arrays/"/>
    <id>http://www.andystabler.co.uk/blog/typed-arrays/</id>
    <published>2018-02-28T00:00:00+00:00</published>
    <updated>2018-02-28T00:00:00+00:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;h2 id="what-are-they"&gt;What are they?&lt;/h2&gt;

&lt;p&gt;Typed arrays provide a way to quickly and easily manipulate the raw data stored inside a binary data buffer. This
is really useful for processing audio and video data. They're similar to arrays, but with some subtle differences
we'll...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="what-are-they"&gt;What are they?&lt;/h2&gt;

&lt;p&gt;Typed arrays provide a way to quickly and easily manipulate the raw data stored inside a binary data buffer. This
is really useful for processing audio and video data. They're similar to arrays, but with some subtle differences
we'll cover in the &lt;a href="#how-are-they-different-from-normal-arrays"&gt;How are they different from normal arrays?&lt;/a&gt; section.&lt;/p&gt;

&lt;h2 id="how-do-they-work"&gt;How do they work?&lt;/h2&gt;

&lt;p&gt;To get an understanding of typed arrays, let's look at the following areas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="#numeric-data-types"&gt;Numeric data types&lt;/a&gt; - a way of representing the data stored in an array buffer&lt;/li&gt;
  &lt;li&gt;&lt;a href="#array-buffers"&gt;Array Buffers&lt;/a&gt; – where the data is stored&lt;/li&gt;
  &lt;li&gt;&lt;a href="#data-views"&gt;Data Views&lt;/a&gt; – reading and writing the data in a typed array&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="numeric-data-types"&gt;Numeric data types&lt;/h3&gt;

&lt;p&gt;Numbers are stored in a 64-bit floating point format in JavaScript, which isn't particularly efficient if you only
need to represent an 8-bit integer (you're wasting 56 bits!).&lt;/p&gt;

&lt;p&gt;Numeric types give us the ability to allocate only the memory we need, which makes mathematical operations on the
data a lot more speedy. For example, if you use an &lt;code&gt;int8&lt;/code&gt; typed array, then each element in the
array will take up 8 bits.&lt;/p&gt;

&lt;p&gt;The following 8 numeric types are available:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;int8&lt;/li&gt;
  &lt;li&gt;uint8&lt;/li&gt;
  &lt;li&gt;int16&lt;/li&gt;
  &lt;li&gt;uint16&lt;/li&gt;
  &lt;li&gt;int32&lt;/li&gt;
  &lt;li&gt;uint32&lt;/li&gt;
  &lt;li&gt;float32&lt;/li&gt;
  &lt;li&gt;float64&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="array-buffers"&gt;Array Buffers&lt;/h3&gt;

&lt;p&gt;An array buffer is an object that represents the raw binary data of the typed array. Their contents can't be
manipulated directly, so to do so you'll need to make use of a &lt;a href="#data-views"&gt;data view&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;let arrayBuffer = new ArrayBuffer(5); &amp;#x2F;&amp;#x2F; allocates 5 bytes for this buffer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="data-views"&gt;Data Views&lt;/h3&gt;

&lt;p&gt;Data views are the means by which the data stored in an array buffer can be accessed and manipulated.&lt;/p&gt;

&lt;p&gt;There are type specific views for each of the different numeric types and also a generic &lt;code&gt;DataView&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;let arrayBuffer = new ArrayBuffer(10); &amp;#x2F;&amp;#x2F; allocates 10 bytes for this buffer

&amp;#x2F;&amp;#x2F; creates a generic Data View object with access to all 10 bytes
let dataView = new DataView(arrayBuffer);

dataView.setInt8(0, 5); &amp;#x2F;&amp;#x2F; stores the number 5 in the first byte
dataView.getInt8(0); &amp;#x2F;&amp;#x2F; returns the number 5

&amp;#x2F;&amp;#x2F; be careful here – we assigned an int8 to the first location, but we
&amp;#x2F;&amp;#x2F; can ask for an int16
&amp;#x2F;&amp;#x2F; (byte 1) 00000101 (byte 2 ) 00000000 together they make 0000010100000000
&amp;#x2F;&amp;#x2F; (or 1280 in base 10)
dataView.getInt16(0); &amp;#x2F;&amp;#x2F; 1280
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in the above example, with a generic data view object you can access the data in any of the
available formats. If this is not what you want, then use the type-specific data views.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;let arrayBuffer = new ArrayBuffer(10); &amp;#x2F;&amp;#x2F; allocates 10 bytes for this buffer

&amp;#x2F;&amp;#x2F; access to 6 8-bit ints starting from the 1st byte (index 0)
let int8Array = new Int8Array(arrayBuffer, 0, 6);

&amp;#x2F;&amp;#x2F; access to 2 16-bit ints starting from the 7th byte (index 6)
let int16Array = new Int16Array(arrayBuffer, 6, 2)

int8Array.length; &amp;#x2F;&amp;#x2F; 6
int16Array.length; &amp;#x2F;&amp;#x2F; 2

int8Array[0] = 127;
int8Array[0]; &amp;#x2F;&amp;#x2F; 127
&amp;#x2F;&amp;#x2F; assigning a number larger than can be represented with a signed byte
int8Array[1] = 128;

&amp;#x2F;&amp;#x2F; binary overflow means the number flips around to -128
&amp;#x2F;&amp;#x2F; 128 is 10000000 in binary and since we are using signed
&amp;#x2F;&amp;#x2F; integers the first bit (1) indicates this is a negative
&amp;#x2F;&amp;#x2F; number. The maximum positive number we can store
&amp;#x2F;&amp;#x2F; is 01111111 (127)
int8Array[1]; &amp;#x2F;&amp;#x2F; -128

int16Array[0] = 128;
int16Array[0]; &amp;#x2F;&amp;#x2F; 128 – no binary overflow here!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: with the unsigned int arrays (&lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Uint16Array&lt;/code&gt;, &lt;code&gt;Uint32Array&lt;/code&gt;) any value below 0 will loop back
around to the maximum value available and any value above the maximum value will loop back around to 0. However,
there is a special &lt;code&gt;Uint8ClampedArray&lt;/code&gt; for unsigned 8-bit integers. In this case, any value below 0
will be capped at 0 and any value above 255 will be capped at 255.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="how-are-they-different-from-normal-arrays"&gt;How are they different from normal arrays?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Typed arrays aren't &lt;code&gt;Array&lt;/code&gt;s– they don't inherit from &lt;code&gt;Array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;Array.isArray(new Int8Array()); &amp;#x2F;&amp;#x2F; false
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;A typed array's size can't be altered once it's been created. Any attempt at setting a value at a
non-existent index will be ignored:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;let int8Array = Int8Array.of(1, 2, 3);
int8Array[5] = 10;
int8Array; &amp;#x2F;&amp;#x2F; Int8Array [ 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;The following methods are not available for typed arrays as they could result in a typed array that has a
different size:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;subarray&lt;/code&gt; methods are available on typed arrays, but not on normal arrays. &lt;code&gt;set&lt;/code&gt; is used for
setting multiple values in a typed array, and &lt;code&gt;subarray&lt;/code&gt; is used for extracting a new typed array containing some
of the elements of another typed array.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="js"&gt;let ints = new Int8Array(4);

ints.set([2,3]); &amp;#x2F;&amp;#x2F; sets the first element to 2 and the second to 3

&amp;#x2F;&amp;#x2F; 2 is used as an offset index. The 3rd element is set to 5 and the
&amp;#x2F;&amp;#x2F; 4th element is set to 8
ints.set([5, 8], 2);
ints; &amp;#x2F;&amp;#x2F; Int8Array [ 2, 3, 5, 8 ]

let moreInts = Int8Array.of(1, 3, 5, 8, 13);
let clone = moreInts.subarray(); &amp;#x2F;&amp;#x2F; Int8Array [ 1, 3, 5, 8, 13 ]
clone === moreInts; &amp;#x2F;&amp;#x2F; false - subarray() creates a new typed array
moreInts.subarray(2); &amp;#x2F;&amp;#x2F; Int8Array [ 5, 8, 13] – 2 is used as the offset index
moreInts.subarray(2, 3); &amp;#x2F;&amp;#x2F; Int8Array [ 5 ] – the end index is exclusive
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="where-can-i-learn-more"&gt;Where can I learn more?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="//amzn.eu/6mexKCK" target="_blank"&gt;Understanding ECMAScript 6&lt;/a&gt; is my favourite book right now. Give it a read.
    &lt;ul&gt;
      &lt;li&gt;I'm making notes as I go through the book. Nicholas was kind enough to let me make these public, so you can
follow along &lt;a href="https://github.com/AndyStabler/ECMAScript6Notes" target="_blank"&gt;here&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank"&gt;The MDN web docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.ecma-international.org/ecma-262/#sec-typedarray-objects" target="_blank"&gt;The ECMAScript specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Test Driven Development</title>
    <link rel="alternate" href="/blog/tdd/"/>
    <id>http://www.andystabler.co.uk/blog/tdd/</id>
    <published>2017-04-18T01:00:00+01:00</published>
    <updated>2017-04-18T01:00:00+01:00</updated>
    <author>
      <name>Andy Stabler</name>
    </author>
    <summary type="html">&lt;p&gt;Welcome to &lt;em&gt;Container Industries Ltd&lt;/em&gt;. As the new engineer here you've been assigned the job of developing the company's container functionality.&lt;/p&gt;

&lt;p&gt;The following requirements have made there way over to your desk:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Items can be added to a container&lt;/li&gt;
&lt;/ol&gt;</summary>
    <content type="html">&lt;p&gt;Welcome to &lt;em&gt;Container Industries Ltd&lt;/em&gt;. As the new engineer here you've been assigned the job of developing the company's container functionality.&lt;/p&gt;

&lt;p&gt;The following requirements have made there way over to your desk:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Items can be added to a container&lt;/li&gt;
  &lt;li&gt;Items are not added to a container if doing so would exceed the container's weight limit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seems nice and simple. Let's use this as an excuse to explore the world of Test Driven Development (TDD) together. There's a really nice rhythm I want to get across in the this post:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write the tests first&lt;/li&gt;
  &lt;li&gt;Run the tests often&lt;/li&gt;
  &lt;li&gt;Only start adding new functionality when the tests are passing&lt;/li&gt;
  &lt;li&gt;When the tests are failing, your sole intention should be to get them to a passing state. Sometimes this means fudging the code, but that's OK; it's all about taking tiny steps and iterating frequently to meet the requirements&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="items-can-be-added-to-a-container"&gt;1. Items can be added to a container&lt;/h2&gt;

&lt;p&gt;Here's the initial test.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# container_spec.rb
describe Container do
  it &amp;quot;can add items&amp;quot; do
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running it we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
&amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;dev&amp;#x2F;Ruby&amp;#x2F;tdd&amp;#x2F;container_spec.rb:2:in `&amp;lt;top (required)&amp;gt;&amp;#x27;: uninitialized constant Container (NameError)
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;configuration.rb:1435:in `load&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;configuration.rb:1435:in `block in load_spec_files&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;configuration.rb:1433:in `each&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;configuration.rb:1433:in `load_spec_files&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;runner.rb:100:in `setup&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;runner.rb:86:in `run&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;runner.rb:71:in `run&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;lib&amp;#x2F;rspec&amp;#x2F;core&amp;#x2F;runner.rb:45:in `invoke&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;gems&amp;#x2F;rspec-core-3.5.4&amp;#x2F;exe&amp;#x2F;rspec:4:in `&amp;lt;top (required)&amp;gt;&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;bin&amp;#x2F;rspec:22:in `load&amp;#x27;
  from &amp;#x2F;Users&amp;#x2F;andy&amp;#x2F;.gem&amp;#x2F;ruby&amp;#x2F;2.4.0&amp;#x2F;bin&amp;#x2F;rspec:22:in `&amp;lt;main&amp;gt;&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like we need to create the &lt;code&gt;Container&lt;/code&gt; definition. We are going to be iterating frequently, so let's do the simplest thing we can right now to get the tests to pass. We'll add the &lt;code&gt;Container&lt;/code&gt; definition right at the top of the spec file.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
end
describe Container do
  it &amp;quot;can add items&amp;quot; do
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
.

Finished in 0.00091 seconds (files took 0.66202 seconds to load)
1 example, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our first passing test! &lt;em&gt;Yess&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/nXxOjZrbnbRxS/giphy.gif" class="blog-post-image" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It isn't actually asserting anything though, so let's start adding &lt;em&gt;real&lt;/em&gt; tests.&lt;/p&gt;

&lt;p&gt;How about we work backwards, writing the test under the assumption that all the variables we need already exist?&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
end
describe Container do
  it &amp;quot;can add items&amp;quot; do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: container.add pasta

     NameError:
       undefined local variable or method `container&amp;#x27; for #&amp;lt;RSpec::ExampleGroups::Container:0x007fcafe150f60&amp;gt;
       Did you mean?  contain_exactly
     # .&amp;#x2F;container_spec.rb:5:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00065 seconds (files took 1.28 seconds to load)
1 example, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:4 # Container can add items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, looks like we need to define the &lt;code&gt;container&lt;/code&gt; attribute in the test.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
end
describe Container do
  let(:container) { Container.new }

  it &amp;quot;can add items&amp;quot; do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: container.add pasta

     NameError:
       undefined local variable or method `pasta&amp;#x27; for #&amp;lt;RSpec::ExampleGroups::Container:0x007fd3a1974d58&amp;gt;
     # .&amp;#x2F;container_spec.rb:7:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00071 seconds (files took 0.27835 seconds to load)
1 example, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:6 # Container can add items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and we need to define &lt;code&gt;pasta&lt;/code&gt; and &lt;code&gt;cake&lt;/code&gt; too.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
describe Container do
  let(:container) { Container.new }
  let(:pasta) { &amp;quot;pasta&amp;quot; }
  let(:cake) { &amp;quot;cake&amp;quot; }

  it &amp;quot;can add items&amp;quot; do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: container.add pasta

     NoMethodError:
       undefined method `add&amp;#x27; for #&amp;lt;Container:0x007f969fa0ba58&amp;gt;
     # .&amp;#x2F;container_spec.rb:9:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00078 seconds (files took 0.27569 seconds to load)
1 example, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:8 # Container can add items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test is failing because we haven't implemented the &lt;code&gt;add&lt;/code&gt; method. So let's add that next.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  def add(item)
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: expect(container.items).to include pasta

     NoMethodError:
       undefined method `items&amp;#x27; for #&amp;lt;Container:0x007fce65a16b08&amp;gt;
     # .&amp;#x2F;container_spec.rb:13:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00068 seconds (files took 0.25235 seconds to load)
1 example, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:10 # Container can add items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it's time to tell &lt;code&gt;Container&lt;/code&gt; that it has some items&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items
  def add(item)
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: expect(container.items).to include pasta
       expected nil to include &amp;quot;pasta&amp;quot;, but it does not respond to `include?`
     # .&amp;#x2F;container_spec.rb:14:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.25862 seconds (files took 0.32494 seconds to load)
1 example, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:11 # Container can add items
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test is failing because our &lt;code&gt;add&lt;/code&gt; method isn't implemented yet. So let's tackle that next.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
.

Finished in 0.00198 seconds (files took 0.22488 seconds to load)
1 example, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's what &lt;code&gt;container_spec.rb&lt;/code&gt; looks like so far:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { &amp;quot;pasta&amp;quot; }
  let(:cake) { &amp;quot;cake&amp;quot; }

  it &amp;quot;can add items&amp;quot; do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="items-are-not-added-to-a-container-if-doing-so-would-exceed-the-containers-weight-limit"&gt;2. Items are not added to a container if doing so would exceed the container's weight limit&lt;/h2&gt;

&lt;p&gt;OK, here's my test:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;  # ...
  it &amp;quot;does not add items that would exceed the weight limit&amp;quot; do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error: container.add house

     NameError:
       undefined local variable or method `house&amp;#x27; for #&amp;lt;RSpec::ExampleGroups::Container:0x007fe2a68d2cd8&amp;gt;
     # .&amp;#x2F;container_spec.rb:26:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00256 seconds (files took 0.24082 seconds to load)
2 examples, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:24 # Container does not add items that would exceed the weight limit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fails because we haven't told the test what a house is.&lt;/p&gt;

&lt;p&gt;What does it mean to be a house? Let's say it means a string with the value "house" for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;describe Container do
  let(:container) { Container.new }
  let(:pasta) { &amp;quot;pasta&amp;quot; }
  let(:cake) { &amp;quot;cake&amp;quot; }
  let(:house) { &amp;quot;house&amp;quot; }

  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error: expect(container.items).to_not include house
       expected [&amp;quot;pasta&amp;quot;, &amp;quot;house&amp;quot;] not to include &amp;quot;house&amp;quot;
     # .&amp;#x2F;container_spec.rb:29:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.1118 seconds (files took 0.44737 seconds to load)
2 examples, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:25 # Container does not add items that would exceed the weight limit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, a proper failure! The house &lt;em&gt;was&lt;/em&gt; added to the container, when instead we should have cast it asunder.&lt;/p&gt;

&lt;p&gt;What's the quickest way we can get the test to pass? Before we figure out the logic for deciding if we should add an item based on its weight, let's get the tests green by only adding the item if it isn't equal to "house".&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item unless item == &amp;quot;house&amp;quot;
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
..

Finished in 0.00256 seconds (files took 0.21494 seconds to load)
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whoa, the tests pass!&lt;/p&gt;

&lt;p&gt;That's a bit weird, right? We fudged the code to make the tests pass. The key thing here is that we have a really tight red, green, refactor cycle; we write the tests, do the bear minimum to get them passing, then refactor to clean things up. We're doing the smallest thing we can to get to a "safe" (tests passing) state, before adding more code. That way we don't stray too far away from the safety of passing tests and don't get sidetracked implementing everything at once.&lt;/p&gt;

&lt;p&gt;Now that the tests are passing we can refactor our &lt;code&gt;add&lt;/code&gt; method to take into account an &lt;code&gt;item&lt;/code&gt;'s weight.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item == &amp;quot;house&amp;quot;
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
..

Finished in 0.00367 seconds (files took 0.24654 seconds to load)
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We've extracted the logic that checks if an item is too heavy into its own method. The tests pass, but we don't really have any way to define how heavy an item is. Let's amend the tests to specify the weights of items.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
FF

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: let(:pasta) { Item.new(5) }

     NameError:
       uninitialized constant Item
     # .&amp;#x2F;container_spec.rb:20:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;
     # .&amp;#x2F;container_spec.rb:25:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

  2) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error: let(:pasta) { Item.new(5) }

     NameError:
       uninitialized constant Item
     # .&amp;#x2F;container_spec.rb:20:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;
     # .&amp;#x2F;container_spec.rb:32:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00088 seconds (files took 0.23031 seconds to load)
2 examples, 2 failures

Failed examples:

rspec .&amp;#x2F;container_spec.rb:24 # Container can add items
rspec .&amp;#x2F;container_spec.rb:31 # Container does not add items that would exceed the weight limit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tests fail because we haven't defined &lt;code&gt;Item&lt;/code&gt; yet. Let's do that now (still inside &lt;code&gt;container_spec.rb&lt;/code&gt; for now):&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error: expect(container.items).to_not include house

       expected [#&amp;lt;Item:0x007fa7481ab5e8 @weight=5&amp;gt;, #&amp;lt;Item:0x007fa7481ab138 @weight=20&amp;gt;] not to include #&amp;lt;Item:0x007fa7481ab138 @weight=20&amp;gt;
       Diff:
       @@ -1,2 +1,2 @@
       -[#&amp;lt;Item:0x007fa7481ab138 @weight=20&amp;gt;]
       +[#&amp;lt;Item:0x007fa7481ab5e8 @weight=5&amp;gt;, #&amp;lt;Item:0x007fa7481ab138 @weight=20&amp;gt;]
     # .&amp;#x2F;container_spec.rb:41:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.1253 seconds (files took 0.26481 seconds to load)
2 examples, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:37 # Container does not add items that would exceed the weight limit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our implementation of the &lt;code&gt;item_too_heavy?&lt;/code&gt; method only checks if an &lt;code&gt;item&lt;/code&gt; is equal to "house". Since we're now using &lt;code&gt;Items&lt;/code&gt;, and not strings, this test fails! Let's perform a similar check, but this time look for an &lt;code&gt;item&lt;/code&gt;'s weight being equal to 20 (the same as the house).&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item.weight == 20
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
..

Finished in 0.00213 seconds (files took 0.22381 seconds to load)
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have some passing tests we can refactor our &lt;code&gt;item_too_heavy?&lt;/code&gt; method. The container needs to know about its weight limit to check if an item is too heavy.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    item.weight &amp;gt; weight_limit
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec test.rb
..

Finished in 0.00234 seconds (files took 0.22688 seconds to load)
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, we have our &lt;code&gt;item_too_heavy?&lt;/code&gt; method taking in to account the container's weight limit.
Since the tests are passing, we can look into cleaning this method up. One thing that jumps out here is that we aren't storing what the container's current weight is. That's important, so let's write a test for it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
describe Container do
  # ...

  it &amp;quot;updates the weight when an item is added&amp;quot; do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq pasta.weight + cake.weight
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
..F

Failures:

  1) Container updates the weight when an item is added
     Failure&amp;#x2F;Error: expect(container.weight).to eq pasta.weight

     NoMethodError:
       undefined method `weight&amp;#x27; for #&amp;lt;Container:0x007fae3f1764d0&amp;gt;
     # .&amp;#x2F;container_spec.rb:47:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.0026 seconds (files took 0.23364 seconds to load)
3 examples, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:45 # Container updates the weight when an item is added
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Container&lt;/code&gt; class doesn't know about its current weight, so the test is failing. Let's add a &lt;code&gt;weight&lt;/code&gt; attribute to the &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
  end

  def add(item)
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    weight + item.weight &amp;gt; weight_limit
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
..F

Failures:

  1) Container updates the weight when an item is added
     Failure&amp;#x2F;Error: expect(container.weight).to eq pasta.weight

       expected: 5
            got: 0

       (compared using ==)
     # .&amp;#x2F;container_spec.rb:48:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.16023 seconds (files took 0.26932 seconds to load)
3 examples, 1 failure

Failed examples:

rspec .&amp;#x2F;container_spec.rb:46 # Container updates the weight when an item is added
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although we're storing the weight on the container, we're never updating the value when we add items. This is why we expected a weight of 5 when it was actually 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  # ...

  def add(item)
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
    @weight += item.weight
  end

  # ...
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.00337 seconds (files took 0.26162 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point our &lt;code&gt;add&lt;/code&gt; method is looking OK, and I'm happy to move on. We can now look into refactoring other parts of the class. I think &lt;code&gt;item_too_heavy?&lt;/code&gt; would be a good next step. It breaks the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank"&gt;Single Responsibilty Principle&lt;/a&gt; in that it's responsible for setting the weight limit of the container &lt;em&gt;and&lt;/em&gt; checking if an item is too heavy. By extracting this assignment into the constructor we are ensuring that &lt;code&gt;item_too_heavy?&lt;/code&gt; only has one reason to change.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
    @weight_limit = 19
  end

  def add item
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight &amp;gt; @weight_limit
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.00394 seconds (files took 0.21574 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's a bit nicer, but I'm still not really happy. We're hard coding the weight limit of our containers, which introduces a reason for the class to change in the future. Say Barry wants to update the weight limit to 15, he might be tempted to dive into the class and change the value. This introduces a risk that he'll accidentally break something while he's in there (you &lt;em&gt;know&lt;/em&gt; what he's like). A more robust approach would be to inject the value of the container weight limit, that way Barry can have containers of varying weight limits without having to modify the &lt;code&gt;Container&lt;/code&gt; class. Score!&lt;/p&gt;

&lt;p&gt;Let's update the tests to inject the weight limit into the &lt;code&gt;container&lt;/code&gt; when we instantiate it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
FFF

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # .&amp;#x2F;container_spec.rb:4:in `initialize&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `new&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;
     # .&amp;#x2F;container_spec.rb:34:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

  2) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # .&amp;#x2F;container_spec.rb:4:in `initialize&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `new&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;
     # .&amp;#x2F;container_spec.rb:41:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

  3) Container updates the weight when an item is added
     Failure&amp;#x2F;Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # .&amp;#x2F;container_spec.rb:4:in `initialize&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `new&amp;#x27;
     # .&amp;#x2F;container_spec.rb:28:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;
     # .&amp;#x2F;container_spec.rb:48:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00117 seconds (files took 0.21716 seconds to load)
3 examples, 3 failures

Failed examples:

rspec .&amp;#x2F;container_spec.rb:33 # Container can add items
rspec .&amp;#x2F;container_spec.rb:40 # Container does not add items that would exceed the weight limit
rspec .&amp;#x2F;container_spec.rb:47 # Container updates the weight when an item is added
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, we broke everything. Let's update the &lt;code&gt;initialize&lt;/code&gt; method in &lt;code&gt;Container&lt;/code&gt; to accept the weight limit.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items, :weight

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  # ...
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.01101 seconds (files took 0.24302 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the tests are passing, we can perform more clean up. For example, we used a named argument for &lt;code&gt;weight_limit&lt;/code&gt; in &lt;code&gt;Container&lt;/code&gt;. Let's do the same thing for &lt;code&gt;Item&lt;/code&gt; and its &lt;code&gt;weight&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, the tests…&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
FFF

Failures:

  1) Container can add items
     Failure&amp;#x2F;Error: weight + item.weight &amp;gt; @weight_limit

     TypeError:
       Hash can&amp;#x27;t be coerced into Integer
     # .&amp;#x2F;container_spec.rb:18:in `+&amp;#x27;
     # .&amp;#x2F;container_spec.rb:18:in `item_too_heavy?&amp;#x27;
     # .&amp;#x2F;container_spec.rb:11:in `add&amp;#x27;
     # .&amp;#x2F;container_spec.rb:34:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

  2) Container does not add items that would exceed the weight limit
     Failure&amp;#x2F;Error: weight + item.weight &amp;gt; @weight_limit

     TypeError:
       Hash can&amp;#x27;t be coerced into Integer
     # .&amp;#x2F;container_spec.rb:18:in `+&amp;#x27;
     # .&amp;#x2F;container_spec.rb:18:in `item_too_heavy?&amp;#x27;
     # .&amp;#x2F;container_spec.rb:11:in `add&amp;#x27;
     # .&amp;#x2F;container_spec.rb:41:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

  3) Container updates the weight when an item is added
     Failure&amp;#x2F;Error: weight + item.weight &amp;gt; @weight_limit

     TypeError:
       Hash can&amp;#x27;t be coerced into Integer
     # .&amp;#x2F;container_spec.rb:18:in `+&amp;#x27;
     # .&amp;#x2F;container_spec.rb:18:in `item_too_heavy?&amp;#x27;
     # .&amp;#x2F;container_spec.rb:11:in `add&amp;#x27;
     # .&amp;#x2F;container_spec.rb:48:in `block (2 levels) in &amp;lt;top (required)&amp;gt;&amp;#x27;

Finished in 0.00106 seconds (files took 0.29553 seconds to load)
3 examples, 3 failures

Failed examples:

rspec .&amp;#x2F;container_spec.rb:33 # Container can add items
rspec .&amp;#x2F;container_spec.rb:40 # Container does not add items that would exceed the weight limit
rspec .&amp;#x2F;container_spec.rb:47 # Container updates the weight when an item is added
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can fix up the &lt;code&gt;Item&lt;/code&gt; class by updating the &lt;code&gt;initialize&lt;/code&gt; method, just like we did for the &lt;code&gt;Container&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# ...
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.01256 seconds (files took 0.25995 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="time-to-refactor"&gt;Time to refactor!&lt;/h3&gt;

&lt;p&gt;This is what our &lt;code&gt;Container&lt;/code&gt;'s &lt;code&gt;item_too_heavy?&lt;/code&gt; method currently looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def item_too_heavy? item
  weight + item.weight &amp;gt; @weight_limit
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we aren't using an accessor method to get the weight limit; we are calling &lt;code&gt;@weight_limit&lt;/code&gt; to access it directly. Although this is &lt;em&gt;fine&lt;/em&gt; here, it's generally best to use an accessor because it changes the statement from calling data (&lt;code&gt;@weight_limit&lt;/code&gt;) to calling behaviour (&lt;code&gt;weight_limit&lt;/code&gt;, the &lt;code&gt;attr_reader&lt;/code&gt; method). This is useful because it means there is one place in our code that defines what it means to be a &lt;code&gt;weight_limit&lt;/code&gt;. This perhaps sounds pedantic, but what if (for safety reasons) there was an update to weight limits, which meant that they were reduced by 5 when the inspectors were around. We would need to find everywhere we were calling the data &lt;code&gt;@weight_limit&lt;/code&gt; and subtract 5 if the inspectors were near. We'd be duplicating behaviour and it'd be likely that something would break. By using an accessor method we could simply override the &lt;code&gt;weight_limit&lt;/code&gt; method to include the suitable logic, and our other methods that relied on the accessor would not need to change.&lt;/p&gt;

&lt;p&gt;Let's make use of Ruby's accessor methods to get the weight limit.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight &amp;gt; weight_limit
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.00201 seconds (files took 0.13739 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we're on removing unnecessary direct calls to instance variables, how about we clean up the &lt;code&gt;add&lt;/code&gt; method by replacing&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;@weight += item.weight
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with a call to an accessor method too?&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
    self.weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight &amp;gt; weight_limit
  end

  def weight=(value)
    @weight = value
  end
end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.00586 seconds (files took 0.28069 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, our &lt;code&gt;container_spec.rb&lt;/code&gt; file is getting pretty &lt;em&gt;hefty&lt;/em&gt;, so let's extract out the classes into their own files.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# container.rb
class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items &amp;lt;&amp;lt; item unless item_too_heavy? item
    self.weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight &amp;gt; weight_limit
  end

  def weight=(value)
    @weight = value
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="ruby"&gt;# item.rb
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="ruby"&gt;# container_spec.rb
require &amp;quot;.&amp;#x2F;container&amp;quot;
require &amp;quot;.&amp;#x2F;item&amp;quot;

describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it &amp;quot;can add items&amp;quot; do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it &amp;quot;does not add items that would exceed the weight limit&amp;quot; do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it &amp;quot;updates the weight when an item is added&amp;quot; do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="sh"&gt;$ rspec container_spec.rb
...

Finished in 0.00203 seconds (files took 0.11261 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Amazing&lt;/em&gt;, the tests still pass! Container Industries Ltd are proud of your hard work and you've been rewarded with an almost &lt;em&gt;brand new&lt;/em&gt; tupperware container.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/tdd/tupperware-885f2d36.jpg" class="blog-post-image" width="200px" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I really enjoy the TDD approach. In the past I've found myself trying to implement all the features at once and getting in too deep quite early on. In the end the code coverage was usually not as high and the code quality was  lower than when I used TDD.&lt;/p&gt;

&lt;p&gt;Do you use TDD regularly? What do you think of it? Do you use an alternative approach?&lt;/p&gt;
</content>
  </entry>
</feed>
