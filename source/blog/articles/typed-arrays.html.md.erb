---
title: Typed Arrays in ECMAScript
date: 2018-02-27
---

### What are they?

Typed arrays are a bit like normal arrays, but their length is fixed– once you've created one you can't change its size.
They provide a way to quickly and easily manipulate the raw data stored inside the array, which is really
useful for processing audio/video data and for games programming.

### How do they work?

To know how typed arrays work let's look at the following areas:

1. [Numeric data types](#numeric-data-types) - the data that is stored in the typed array
2. [Array Buffers](#array-buffers) – where the data is stored
3. [Data Views](#data-views) – reading and writing the data in the typed array

#### Numeric data types

Numbers are stored in a 64-bit floating point format in JavaScript, which isn't particularly efficient if you only
need to represent an 8-bit integer (you're wasting 56 bits!).

Numeric types give us the ability to allocate only the memory we need, which makes mathematical operations on the
data a lot more speedy. For example, if you use an `int8` typed array, then each element in the
array will take up 8 bits.

The following 8 numeric types are available:

1. int8
2. uint8
3. int16
4. uint16
5. int32
6. uint32
7. float32
8. float64

#### Array Buffers

Array buffers are at the centre of typed arrays. They're an object that represent the raw binary data, but you
can't manipulate the data they store directly (see (Data Views)[#data-views]).

```js
let arrayBuffer = new ArrayBuffer(5); // allocates 5 bytes for this buffer
```

#### Data Views

Data views are the means by which the data stored in an array buffer can be accessed.

There are type specific views for each of the different numeric types and also a generic `DataView` object.

```js
let arrayBuffer = new ArrayBuffer(10); // allocates 10 bytes for this buffer

let dataView = new DataView(arrayBuffer); // creates a generic Data View object with access to all 10 bytes

dataView.setInt8(0, 5); // stores the number 5 in the first byte
dataView.getInt8(0); // returns the number 5

// Oops – be careful here. We assigned an int8 to the first byte, but we can ask for an int16
dataView.getInt16(0); // (byte 1) 00000101 (byte 2 ) 00000000 together they make 0000010100000000 = 1280
```

As you can see in the above example, with a generic data view object you can access the data in any of the
available formats– this may not be what you want, in this case use the type-specific data views.

```js
let arrayBuffer = new ArrayBuffer(10); // allocates 10 bytes for this buffer

let int8Array = new Int8Array(arrayBuffer, 0, 6); // access to 6 8-bit ints starting from the 1st byte
let int16Array = new Int16Array(arrayBuffer, 6, 2); // access to 2 16-bit ints starting from the 7th byte

int8Array.length; // 6
int16Array.length; // 2

int8Array[0] = 127;
int8Array[0]; // 127
int8Array[1] = 128; // assigning a number larger than can be represented with a signed byte

int8Array[1]; // -128 – binary overflow meant the number flipped around to -128
              // 128 is 10000000 in binary and since we are using signed integers the first bit
              // indicates this is a negative number. The maximum positive number we can store is 01111111 (127)

int16Array[0] = 128;
int16Array[0]; // 128 – no binary overflow here!
```

_Note: with the unsigned int arrays (`Uint8Array`, `Uint16Array`, `Uint32Array`) any value below 0 will loop back
around to the maximum value available and any value above the maximum value will loop back around to 0. However,
there is a special `Uint8ClampedArray` for the case of unsigned 8-bit integers. In this case any value below 0
will be capped at 0 and any value above 255 will be capped at 255.

### How are typed arrays different from normal arrays?

* Typed arrays arent `Array`s– they don't inherit from `Array`

```js
Array.isArray(new Int8Array()); // false
```

* A typed array's size can't be altered once it's been created. Any attempt at setting a value at a
non-existent index will be ignored:

```js
let int8Array = Int8Array.of(1, 2, 3);
int8Array[5] = 10;
int8Array; // Int8Array [ 1, 2, 3 ]
```

* The following methods are not available for typed arrays as they could result in an array that has a
different size:
  * `concat`
  * `shift`
  * `pop`
  * `splice`
  * `push`
  * `unshift`

* The `set` and `subarray` methods are available on typed arrays, but not on normal arrays:

```js
let ints = new Int8Array(4);
ints.set([2,3]); // sets the first element to 2 and the second to 3
ints.set([5, 8], 2); // 2 is used as an offset. The 3rd element is set to 5 and the 4th element is set to 8
ints; // Int8Array [ 2, 3, 5, 8 ]

let ints = new Int8Array([1, 3, 5, 8, 13]);
ints.subarray(); // Int8Array [ 1, 2, 3, 4 ] – this is a new typed array object
ints.subarray(2); // Int8Array [ 5, 8, 13] – 2 is used as the index offset
ints.subarray(2, 3); // Int8Array [ 5 ] – the end index is exclusive
```
