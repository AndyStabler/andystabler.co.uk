---
title: TDD
date: 2017-03-18
image: https://andystabler.co.uk/assets/images/tdd/tupperware.jpg
---
Welcome to _Container Industries Ltd_. As the top engineer here you've been assigned the job of developing the company's container functionality.

The following requirements have made there way over to your desk:

1. Items can be added to a container
2. Items are not added to a container if doing so would exceed the container's weight limit.

Seems nice and simple. Let's use the requirements as an excuse to explore the world of Test Driven Development (TDD) together. There's a really nice rhythm I want to get across in the this post:

1. Write the tests first (duh)
2. Run the tests often
3. Only start adding new functionality when the tests are passing
4. When the tests are failing, you're sole intention should be to get them to a passing state. Sometimes this means fudging the code, but that's OK; it's all about taking tiny steps and iterating frequently to meet the requirements

## 1. Items can be added to a container

Here's the initial test.

<% code_tag "ruby" do %>
# container_spec.rb
describe Container do
  it "can add items" do
  end
end
<% end %>

After running it we get:

<% code_tag "sh" do %>
$ rspec container_spec.rb
/Users/andy/Documents/Programming/Ruby/tdd/container_spec.rb:1:in `&lt;top (required)&gt;': uninitialized constant Container (NameError)
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `load'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `block in load_spec_files'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `each'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `load_spec_files'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:100:in `setup'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:86:in `run'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:71:in `run'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:45:in `invoke'
  from /Users/andy/.gem/ruby/2.4.0/gems/rspec-core-3.5.4/exe/rspec:4:in `&lt;top (required)&gt;'
  from /Users/andy/.gem/ruby/2.4.0/bin/rspec:22:in `load'
  from /Users/andy/.gem/ruby/2.4.0/bin/rspec:22:in `&lt;main&gt;'
<% end %>

Looks like we need to create the Container definition. We are going to be iterating frequently, so let's do the simplest thing we can right now to get the tests to pass. We'll add the Container definition right at the top of the spec file.

<% code_tag "ruby" do %>
class Container
end
describe Container do
  it "can add items" do
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
.

Finished in 0.00091 seconds (files took 0.66202 seconds to load)
1 example, 0 failures
<% end %>

Our first passing test! _Yess_

<%= image_tag "https://media.giphy.com/media/nXxOjZrbnbRxS/giphy.gif", class: "blog-post-image" %>

It isn't actually asserting anything though, so let's start adding _real_ tests.

How about we work backwards, writing the test under the assumption that all the variables we need already exist?

<% code_tag "ruby" do %>
class Container
end
describe Container do
  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure/Error: container.add pasta

     NameError:
       undefined local variable or method `container' for #<RSpec::ExampleGroups::Container:0x007fd53416d8a0>
       Did you mean?  contain_exactly
     # ./container_spec.rb:5:in `block (2 levels) in <top (required)>'

Finished in 0.00071 seconds (files took 0.96883 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./container_spec.rb:4 # Container can add items
<% end %>

Alright, looks like we need to define the container attribute.

<% code_tag "ruby" do %>
class Container
end
describe Container do
  let(:container) { Container.new }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure/Error: container.add pasta

     NameError:
       undefined local variable or method `pasta' for #<RSpec::ExampleGroups::Container:0x007f8bbf1981b8>
     # ./container_spec.rb:7:in `block (2 levels) in <top (required)>'

Finished in 0.0007 seconds (files took 0.21872 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./container_spec.rb:6 # Container can add items
<% end %>

...and we need to define pasta and cake too, I guess.

<% code_tag "ruby" do %>
class Container
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure/Error: container.add pasta

     NoMethodError:
       undefined method `add' for #<Container:0x007fe3561aea00>
     # ./container_spec.rb:9:in `block (2 levels) in <top (required)>'

Finished in 0.00062 seconds (files took 0.11975 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./container_spec.rb:8 # Container can add items
<% end %>

The test is failing because we haven't implemented the add method. So let's add that next.

<% code_tag "ruby" do %>
class Container
  def add(item)
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure/Error: expect(container.items).to include pasta

     NoMethodError:
       undefined method `items' for #<Container:0x007fb5a418b7b0>
     # ./container_spec.rb:13:in `block (2 levels) in <top (required)>'

Finished in 0.00055 seconds (files took 0.1139 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./container_spec.rb:10 # Container can add items
<% end %>

Now, it's time to tell Container that it has some items

<% code_tag "ruby" do %>
class Container
  attr_reader :items
  def add(item)
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
F

Failures:

  1) Container can add items
     Failure/Error: expect(container.items).to include pasta
       expected nil to include "pasta", but it does not respond to `include?`
     # ./container_spec.rb:14:in `block (2 levels) in <top (required)>'

Finished in 0.02871 seconds (files took 0.19786 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./container_spec.rb:11 # Container can add items
<% end %>

This test is failing because our add method isn't implemented yet. So let's tackle that next.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
.

Finished in 0.0025 seconds (files took 0.28632 seconds to load)
1 example, 0 failures
<% end %>


## 2. Items are not added to a container if doing so would exceed the container's weight limit

OK, here's my test:

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>

This fails since we haven't told the test what a house is:

<% code_tag "sh" do %>
$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure/Error: container.add house

     NameError:
       undefined local variable or method `house' for #<RSpec::ExampleGroups::Container:0x007f996c8afd38>
     # ./container_spec.rb:26:in `block (2 levels) in <top (required)>'

Finished in 0.00148 seconds (files took 0.13178 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./container_spec.rb:24 # Container does not add items that would exceed the weight limit
<% end %>

What does it mean to be a house? Let's say it means a string with the value "house" for now.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }
  let(:house) { "house" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>

Cool, a proper failure! The house _was_ added to the container, when instead we should have cast it asunder.

<% code_tag "sh" do%>
$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure/Error: expect(container.items).to_not include house
       expected ["pasta", "house"] not to include "house"
     # ./container_spec.rb:29:in `block (2 levels) in <top (required)>'

Finished in 0.10028 seconds (files took 0.21663 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./container_spec.rb:25 # Container does not add items that would exceed the weight limit
<% end %>

What's the quickest way we can get the test to pass? Before we figure out the logic for deciding if we should add an item based on its weight, let's get the tests green.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item == "house"
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }
  let(:house) { "house" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>

Whoa, the tests pass!

<% code_tag "sh" do %>
$ rspec container_spec.rb
..

Finished in 0.00246 seconds (files took 0.54005 seconds to load)
2 examples, 0 failures
<% end %>

That's a bit weird, right? We fudged the code to make the tests pass. The key thing here is that we have a really tight red, green, refactor cycle; we write the tests, do the bear minimum to get them passing, then refactor to clean things up. We're doing the smallest thing we can to get to a "safe" (tests passing) state, before adding more code. That way we don't stray too far away from the safety of passing tests.

Now that the tests are passing we can refactor our add method to take into account an item's weight.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item == "house"
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { "pasta" }
  let(:cake) { "cake" }
  let(:house) { "house" }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
..

Finished in 0.01019 seconds (files took 0.9205 seconds to load)
2 examples, 0 failures
<% end %>

We've extracted the logic that checks if an item is too heavy into its own method. The tests pass, but we don't really have any way to define how heavy an item is. Let's amend the tests to specify the weights of items.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item == "house"
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>
<% code_tag "sh" do %>
$ rspec container_spec.rb
FF

Failures:

  1) Container can add items
     Failure/Error: let(:pasta) { Item.new(5) }

     NameError:
       uninitialized constant Item
     # ./container_spec.rb:18:in `block (2 levels) in <top (required)>'
     # ./container_spec.rb:23:in `block (2 levels) in <top (required)>'

  2) Container does not add items that would exceed the weight limit
     Failure/Error: let(:pasta) { Item.new(5) }

     NameError:
       uninitialized constant Item
     # ./container_spec.rb:18:in `block (2 levels) in <top (required)>'
     # ./container_spec.rb:30:in `block (2 levels) in <top (required)>'

Finished in 0.00085 seconds (files took 0.13171 seconds to load)
2 examples, 2 failures

Failed examples:

rspec ./container_spec.rb:22 # Container can add items
rspec ./container_spec.rb:29 # Container does not add items that would exceed the weight limit
<% end %>

The tests fail because we haven't defined Item yet. Let's do that now:

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item == "house"
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>
<% code_tag "sh" do %>
$ rspec container_spec.rb
.F

Failures:

  1) Container does not add items that would exceed the weight limit
     Failure/Error: expect(container.items).to_not include house

       expected [#<Item:0x007fa67514ead8 @weight=5>, #<Item:0x007fa67514e9e8 @weight=20>] not to include #<Item:0x007fa67514e9e8 @weight=20>
       Diff:
       @@ -1,2 +1,2 @@
       -[#<Item:0x007fa67514e9e8 @weight=20>]
       +[#<Item:0x007fa67514ead8 @weight=5>, #<Item:0x007fa67514e9e8 @weight=20>]
     # ./container_spec.rb:39:in `block (2 levels) in <top (required)>'

Finished in 0.11428 seconds (files took 0.21704 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./container_spec.rb:35 # Container does not add items that would exceed the weight limit
<% end %>

Our implementation of the `item_too_heavy?` method only checks if an item is equal to "house". Since we're now using Items, and not strings, this test fails! Let's perform a similar check, but this time look for an item's weight being equal to 20 (the same as the house).

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    item.weight == 20
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>
<% code_tag "sh" do %>
$ rspec container_spec.rb
..

Finished in 0.01038 seconds (files took 0.8922 seconds to load)
2 examples, 0 failures
<% end %>

Now we have some passing tests we can refactor our `item_too_heavy?` method. The container needs to know about its weight limit to check if an item is too heavy.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    item.weight > weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec test.rb
..

Finished in 0.00942 seconds (files took 1.14 seconds to load)
2 examples, 0 failures
<% end %>
Cool, we have our `item_too_heavy?` method taking in to account the container weight limit.
Since the tests are passing, we can look into cleaning this method up. One thing that jumps out here is that we aren't storing what the container's current weight is. That's important, so let's write a test for it.

<% code_tag "ruby" do %>
class Container
  attr_reader :items

  def initialize
    @items = []
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    item.weight > weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq pasta.weight + cake.weight
  end
end

<% end %>
<% code_tag "sh" do %>
$ rspec container_spec.rb
..F

Failures:

  1) Container updates the weight when an item is added
     Failure/Error: expect(container.weight).to eq pasta.weight

     NoMethodError:
       undefined method `weight' for #<Container:0x007f98e99e0208>
     # ./container_spec.rb:46:in `block (2 levels) in <top (required)>'

Finished in 0.01097 seconds (files took 1.03 seconds to load)
3 examples, 1 failure

Failed examples:

rspec ./container_spec.rb:44 # Container updates the weight when an item is added
<% end %>

The Container class doesn't know about its current weight, so the test is failing. Let's add a weight attribute to the Container.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
  end

  def add(item)
    items << item unless item_too_heavy? item
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    weight + item.weight > weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
..F

Failures:

  1) Container updates the weight when an item is added
     Failure/Error: expect(container.weight).to eq pasta.weight

       expected: 5
            got: 0

       (compared using ==)
     # ./container_spec.rb:48:in `block (2 levels) in <top (required)>'

Finished in 0.09821 seconds (files took 0.22318 seconds to load)
3 examples, 1 failure

Failed examples:

rspec ./container_spec.rb:46 # Container updates the weight when an item is added
<% end %>

Although we're storing the weight on the Container, we're never updating the value when we add items. This is why we expected a weight of 5 when the weight was actually 0.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
  end

  def add(item)
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight_limit = 19
    weight + item.weight > weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
...

Finished in 0.00355 seconds (files took 0.23894 seconds to load)
3 examples, 0 failures
<% end %>

At this point our `add` method is looking OK, and I'm happy to move on. We can look now into refactoring other parts of the class. I think `item_too_heavy?` would be a good next step. It breaks the Single Responsibilty Principle in that it's responsible for setting the weight limit of the container _and_ checking if an item is too heavy. By extracting this assignment into the constructor we are ensuring that `item_too_heavy?` only has one reason to change.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
    @weight_limit = 19
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > @weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
...

Finished in 0.00218 seconds (files took 0.14696 seconds to load)
3 examples, 0 failures
<% end %>

That's a bit nicer, but I'm still not really happy. We're hard coding the weight limit of our containers, which introduces a reason for the class to change in the future. Say Barry wants to update the weight limit to 15, he might be tempted to dive into the class and change the value. This introduces a risk that he'll accidentally break something while he's in there (you _know_ what he's like). A more robust approach would be to inject the value of the container limit, that way Barry can have containers of varying weight limits without having to modify the Container class. Score!

Let's update the tests to inject the weight limit into the container when we instantiate it.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize
    @items = []
    @weight = 0
    @weight_limit = 19
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > @weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
FFF

Failures:

  1) Container can add items
     Failure/Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./container_spec.rb:4:in `initialize'
     # ./container_spec.rb:26:in `new'
     # ./container_spec.rb:26:in `block (2 levels) in <top (required)>'
     # ./container_spec.rb:32:in `block (2 levels) in <top (required)>'

  2) Container does not add items that would exceed the weight limit
     Failure/Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./container_spec.rb:4:in `initialize'
     # ./container_spec.rb:26:in `new'
     # ./container_spec.rb:26:in `block (2 levels) in <top (required)>'
     # ./container_spec.rb:39:in `block (2 levels) in <top (required)>'

  3) Container updates the weight when an item is added
     Failure/Error:
       def initialize
         @items = []
         @weight = 0
         @weight_limit = 19
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./container_spec.rb:4:in `initialize'
     # ./container_spec.rb:26:in `new'
     # ./container_spec.rb:26:in `block (2 levels) in <top (required)>'
     # ./container_spec.rb:46:in `block (2 levels) in <top (required)>'

Finished in 0.00121 seconds (files took 0.21845 seconds to load)
3 examples, 3 failures

Failed examples:

rspec ./container_spec.rb:31 # Container can add items
rspec ./container_spec.rb:38 # Container does not add items that would exceed the weight limit
rspec ./container_spec.rb:45 # Container updates the weight when an item is added
<% end %>

Cool, we broke everything. Let's update the `initialize` method in Container to accept the weight limit.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > @weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(5) }
  let(:cake) { Item.new(5) }
  let(:house) { Item.new(20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
...

Finished in 0.01111 seconds (files took 0.24546 seconds to load)
3 examples, 0 failures
<% end %>

Now that the tests are passing, we can perform more clean up. For example, we used a named argument for `weight_limit` in Container. Let's do the same thing for `Item` and its weight.

First, the tests...

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > @weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
FFF

Failures:

  1) Container can add items
     Failure/Error: weight + item.weight > @weight_limit

     TypeError:
       Hash can't be coerced into Integer
     # ./container_spec.rb:16:in `+'
     # ./container_spec.rb:16:in `item_too_heavy?'
     # ./container_spec.rb:11:in `add'
     # ./container_spec.rb:32:in `block (2 levels) in <top (required)>'

  2) Container does not add items that would exceed the weight limit
     Failure/Error: weight + item.weight > @weight_limit

     TypeError:
       Hash can't be coerced into Integer
     # ./container_spec.rb:16:in `+'
     # ./container_spec.rb:16:in `item_too_heavy?'
     # ./container_spec.rb:11:in `add'
     # ./container_spec.rb:39:in `block (2 levels) in <top (required)>'

  3) Container updates the weight when an item is added
     Failure/Error: weight + item.weight > @weight_limit

     TypeError:
       Hash can't be coerced into Integer
     # ./container_spec.rb:16:in `+'
     # ./container_spec.rb:16:in `item_too_heavy?'
     # ./container_spec.rb:11:in `add'
     # ./container_spec.rb:46:in `block (2 levels) in <top (required)>'

Finished in 0.00097 seconds (files took 0.14589 seconds to load)
3 examples, 3 failures

Failed examples:

rspec ./container_spec.rb:31 # Container can add items
rspec ./container_spec.rb:38 # Container does not add items that would exceed the weight limit
rspec ./container_spec.rb:45 # Container updates the weight when an item is added
<% end %>

Now we can fix `Item` class just like we did for the `Container` class to make the tests pass.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > @weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
...

Finished in 0.01194 seconds (files took 0.23022 seconds to load)
3 examples, 0 failures
<% end %>

Time to refactor! Notice that we aren't using an accessor method to get the weight limit, we are calling `@weight_limit` to access it directly. Although this is _fine_ here, it's generally best to use an accessor because it changes the statement from calling data (`@weight_limit`) to calling behaviour (`weight_limit` the `attr_reader` method). This is useful because it means there is one place in our code that defines what it means to be a `weight_limit`. This perhaps sounds pedantic, but what if (for safety reasons) there was an update to weight limits, which meant that they were reduced by 5 when the inspectors were in. We would need to find everywhere we were calling the data `@weight_limit` and subtract 5 if the inspectors were around. We'd be duplicating behaviour and things would go wrong quickly. By using an accessor method, we could simply override the `weight_limit` method to include the suitable logic, and our other methods that relied on the accessor would not need to change.

So let's make use of Ruby's accessor methods to get the weight limit.

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    @weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > weight_limit
  end
end
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
$ rspec container_spec.rb
...

Finished in 0.01215 seconds (files took 0.99866 seconds to load)
3 examples, 0 failures
<% end %>

While we're on removing unnecessary direct calls to instance variables, how about we replace

<% code_tag "ruby" do %>
@weight += item.weight
<% end %>

with a call to an accessor method?

<% code_tag "ruby" do %>
class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    self.weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > weight_limit
  end

  def weight=(value)
    @weight = value
  end
end
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
...

Finished in 0.00422 seconds (files took 0.23954 seconds to load)
3 examples, 0 failures
<% end %>

At this point, our `container_spec.rb` file is getting pretty _hefty_, so let's extract out the classes into their own files.

<% code_tag "ruby" do %>
# container.rb
class Container
  attr_reader :items, :weight, :weight_limit

  def initialize(weight_limit:)
    @items = []
    @weight = 0
    @weight_limit = weight_limit
  end

  def add item
    items << item unless item_too_heavy? item
    self.weight += item.weight
  end

  private

  def item_too_heavy? item
    weight + item.weight > weight_limit
  end

  def weight=(value)
    @weight = value
  end
end
<% end %>

<% code_tag "ruby" do %>
# item.rb
class Item
  attr_reader :weight
  def initialize(weight:)
    @weight = weight
  end
end
<% end %>

<% code_tag "ruby" do %>
# container_spec.rb
require "./container"
require "./item"

describe Container do
  let(:container) { Container.new(weight_limit: 19) }
  let(:pasta) { Item.new(weight: 5) }
  let(:cake) { Item.new(weight: 5) }
  let(:house) { Item.new(weight: 20) }

  it "can add items" do
    container.add pasta
    container.add cake
    expect(container.items).to include pasta
    expect(container.items).to include cake
  end

  it "does not add items that would exceed the weight limit" do
    container.add pasta
    container.add house
    expect(container.items).to include pasta
    expect(container.items).to_not include house
  end

  it "updates the weight when an item is added" do
    container.add pasta
    expect(container.weight).to eq pasta.weight
    container.add cake
    expect(container.weight).to eq (pasta.weight + cake.weight)
  end
end
<% end %>

<% code_tag "sh" do %>
rspec container_spec.rb
...

Finished in 0.00336 seconds (files took 0.22253 seconds to load)
3 examples, 0 failures
<% end %>

_Amazing_, the tests still pass! Container Industries Ltd are proud of your hard work and you've been rewarded with an almost brand new tupperware container.

<%= image_tag "tdd/tupperware.jpg", class: "blog-post-image" %>
